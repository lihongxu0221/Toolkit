using BgCommon.Collections;namespace BgLogger.Logging.Models;/// <summary>/// 表示日志源的显示信息，包括名称、是否启用显示、实时日志集合等。/// </summary>public class LogSourceDisplay : BindableBase{    private string name = string.Empty;    private BgLoggerSource source = BgLoggerSource.UnKnowm;    private bool isDisplayEnabled = false;    private ICollectionView? filteredRealTimeLogs = null;    /// <summary>    /// Gets or sets 日志源名称。    /// </summary>    public string Name    {        get => name;        set => SetProperty(ref name, value);    }    /// <summary>    /// Gets or sets 日志源枚举。    /// </summary>    public BgLoggerSource Source    {        get => source;        set => SetProperty(ref source, value);    }    /// <summary>    /// Gets or sets a value indicating whether 是否启用该日志源的显示。    /// </summary>    public bool IsDisplayEnabled    {        get => isDisplayEnabled;        set => SetProperty(ref isDisplayEnabled, value);    }    /// <summary>    /// Gets 实时日志条目的集合。    /// </summary>    public ObservableRangeCollection<LogEntry> RealTimeLogs { get; } = new ObservableRangeCollection<LogEntry>();    /// <summary>    /// Gets or sets 实时日志条目的最大数量。    /// </summary>    public int MaxRealTimeEntries { get; set; } = 200; // 可按需为每个源配置    /// <summary>    /// Gets 获取或设置经过筛选的日志源集合视图    /// </summary>    public ICollectionView? FilteredRealTimeLogs    {        get        {            return filteredRealTimeLogs;        }        private set        {            _ = SetProperty(ref filteredRealTimeLogs, value);        }    }    /// <summary>    /// Initializes a new instance of the <see cref="LogSourceDisplay"/> class.<br/>    /// 初始化 <see cref="LogSourceDisplay"/> 类的新实例。    /// </summary>    /// <param name="setting">日志源设置。</param>    public LogSourceDisplay(LogSourceSetting setting)    {        Name = setting.Name;        IsDisplayEnabled = setting.IsDisplayEnabled;        MaxRealTimeEntries = setting.MaxRealTimeEntries;        if (Enum.TryParse(typeof(BgLoggerSource), name, true, out object? enumValue) && enumValue != null)        {            Source = (BgLoggerSource)enumValue;        }        // 创建视图并设置过滤        FilteredRealTimeLogs = CollectionViewSource.GetDefaultView(RealTimeLogs);    }    public void Update(LogSourceSetting setting)    {        Name = setting.Name;        IsDisplayEnabled = setting.IsDisplayEnabled;        MaxRealTimeEntries = setting.MaxRealTimeEntries;        if (Enum.TryParse(typeof(BgLoggerSource), name, true, out object? enumValue) && enumValue != null)        {            Source = (BgLoggerSource)enumValue;        }    }    /// <summary>    /// 向实时日志集合添加一条日志条目，并确保不超过最大条目数。    /// </summary>    /// <param name="entries">要添加的日志条目。</param>    public async void AddLogEntry(params LogEntry[] entries)    {        await Application.Current.Dispatcher.InvokeAsync(() =>         {             try             {                 if (!IsDisplayEnabled)                 {                     return;                 }                 if (entries == null || entries.Length == 0)                 {                     return;                 }                 // Trace.WriteLine($"[{Source}]接收到 {entries.Length} 条日志，每次最多显示条数 {MaxRealTimeEntries}");                 // 确保按时间戳降序排列                 var list = entries.OrderByDescending(e => e.Timestamp).ToArray();                 if (list.Length > MaxRealTimeEntries)                 {                     RealTimeLogs.Clear();                     list = list.Take(MaxRealTimeEntries).ToArray(); // 如果超过最大条目数，则截断                 }                 else if (list.Length + RealTimeLogs.Count > MaxRealTimeEntries)                 {                     int length = RealTimeLogs.Count + list.Length - MaxRealTimeEntries;                     int startIndex = RealTimeLogs.Count - length - 1;                     RealTimeLogs.RemoveRange(startIndex, length); // 从底部移除多余的条目                 }                 RealTimeLogs.InsertRange(0, list);             }             catch (Exception ex)             {                 // 处理异常，可能是日志条目格式不正确或其他问题                 throw;             }         });    }    /// <summary>    /// 根据指定的日志级别过滤实时日志集合。    /// </summary>    /// <param name="logLevel">要筛选的日志级别。</param>    public void ApplyFilter(string logLevel)    {        if (FilteredRealTimeLogs != null)        {            if (string.IsNullOrWhiteSpace(logLevel) || logLevel.ToLowerInvariant() == "all")            {                FilteredRealTimeLogs.Filter = null; // 清除过滤            }            else            {                string filter = logLevel.ToLower();                FilteredRealTimeLogs.Filter = item =>                {                    if (item is LogEntry person)                    {                        // 在多个属性上进行过滤                        return person.Level.ToLower().Contains(filter);                    }                    return false;                };            }        }    }    public override string ToString()    {        return $"{Name},{IsDisplayEnabled},{MaxRealTimeEntries}";    }}