using BgCommon.Collections;using BgCommon.Prism.Wpf.Authority.Services;using BgCommon.Prism.Wpf.Common.ViewModels;using BgCommon.Prism.Wpf.Common.Views;using ModuleInfo = BgCommon.Prism.Wpf.Authority.Entities.ModuleInfo;namespace BgCommon.Prism.Wpf.MVVM;/// <summary>/// 导航视图模型类，负责管理应用程序的导航和视图加载逻辑./// </summary>public abstract partial class NavigationHostViewModelBase : NavigationViewModelBase, IInitialize, IScopedRegionManagerAware{    public const string DefaultRegionName = "MainContentRegion";    private readonly IModuleService moduleService; // 模块服务，用于获取模块信息    private IRegionManager? scopedRegionManager = null; // 为当前加载的视图创建的局部RegionManager    private INavigationParameters? navigationParameters = null; // 导航到该视图的参数    /// <summary>    /// 主模块导航中.    /// </summary>    [ObservableProperty]    private bool isNavigating = false;    /// <summary>    /// 子模块导航加载中.    /// </summary>    [ObservableProperty]    private bool isContentLoading = false;    /// <summary>    /// 获取待显示的模块集合.    /// </summary>    [ObservableProperty]    private ObservableRangeCollection<ModuleInfo> views = new();    /// <summary>    /// 当前选中显示的视图, 设置此属性会触发导航流程.    /// </summary>    [ObservableProperty]    private ModuleInfo? selectedView = null;    /// <summary>    /// 当前视图相关信息.    /// </summary>    [ObservableProperty]    private ModuleInfo? dataContext = null;    /// <summary>    /// 要导航的区域名称.    /// </summary>    [ObservableProperty]    private string regionName = DefaultRegionName;    /// <summary>    /// Gets a value indicating whether 该值指示是否使用模块宿主视图来加载目标视图.    /// </summary>    public bool IsUseModuleHost { get; }    /// <summary>    /// Gets 模块服务实例.    /// </summary>    public IModuleService ModuleService => this.moduleService;    /// <summary>    /// Initializes a new instance of the <see cref="NavigationHostViewModelBase"/> class.    /// 初始化 AbstractNavigationViewModel 类的新实例.    /// </summary>    /// <param name="container">Prism Ioc 容器.</param>    /// <param name="regionName">默认主区域名称.</param>    /// <param name="isUseModuleHost">是否使用模块宿主视图来加载目标视图.</param>    public NavigationHostViewModelBase(IContainerExtension container, string regionName, bool isUseModuleHost = false)        : base(container)    {        this.moduleService = container.Resolve<IModuleService>();        this.RegionName = regionName;        this.IsUseModuleHost = isUseModuleHost;    }    /// <summary>    /// Gets a value indicating whether gets 该值指示模块当前是否正在加载。此属性可防止并发的导航请求.    /// </summary>    public bool IsLoading => IsNavigating || IsContentLoading;    protected override void OnActivated()    {        base.OnActivated();        _ = this.SubscribeEx<ModuleHostViewChanged>(this.OnModuleHostViewLoaded);    }    protected override void OnDeactivated()    {        base.OnDeactivated();        this.UnsubscribeEx<ModuleHostViewChanged>(this.OnModuleHostViewLoaded);    }    /// <inheritdoc/>    public void Initialize(INavigationParameters? parameters = null)    {        // 将所有初始化逻辑（包括UI更新）都放在Dispatcher中执行，以确保线程安全。        _ = Application.Current.Dispatcher.InvokeAsync(() =>        {            // 加载所有视图.            this.SelectedView = null; // 清除当前选中的视图，为重新加载做准备.            this.Views.Clear();            this.navigationParameters = parameters;            // 如果有导航参数，则尝试获取 DataContext.            if (parameters?.GetValue<ModuleInfo>("CurrentView") is ModuleInfo currentView)            {                this.DataContext = currentView;            }            // 如果没有指定父模块ID，则使用默认的0.            long parentId = this.DataContext?.Id ?? 0;            // 获取所有模块视图并添加到集合中.            this.Views.AddRange(this.moduleService.GetModules(parentId));            this.OnInitializeViewsRequested(parameters);            // 统一在此处设置初始选中项。这将触发 OnSelectedViewChanged 以加载第一个视图。            if (this.SelectedView == null)            {                this.SelectedView = this.Views.FirstOrDefault();            }        });    }    /// <summary>    /// 处理模块宿主视图加载完成事件.    /// </summary>    /// <param name="e">包含视图模型、视图名称和异常的元组.</param>    private void OnModuleHostViewLoaded(ModuleHostViewChanged e)    {        if (e.Module != null && this.Views.Contains(e.Module))        {            this.IsContentLoading = e.IsBusy;            if (e.Exception != null)            {                // 处理异常情况.                LogRun.Error($"模块 '{e.Module.Name}' 在 ModuleHostView 内部加载时发生异常: {e.Exception}");                // 可以显示一个错误视图或弹出提示.                // this.CurrentContent = new ErrorView(exception.Message);            }        }    }    partial void OnIsNavigatingChanged(bool value) => OnPropertyChanged(nameof(IsLoading));    partial void OnIsContentLoadingChanged(bool value) => OnPropertyChanged(nameof(IsLoading));    /// <summary>    /// 当 SelectedView 属性发生变化时，此方法由 CommunityToolkit.Mvvm 自动调用。    /// 这是触发导航的唯一入口点。    /// </summary>    /// <param name="oldValue">旧的选中视图.</param>    /// <param name="newValue">新的选中视图.</param>    partial void OnSelectedViewChanged(ModuleInfo? oldValue, ModuleInfo? newValue)    {        // 如果没有选择新项，或者正在加载，则忽略        if (newValue == null || IsLoading)        {            return;        }        // 异步执行导航，不要阻塞UI线程        if (CanNavigate(newValue, oldValue, moduleService))        {            _ = NavigateToViewAsync(newValue, oldValue);        }    }    /// <summary>    /// 执行实际的导航逻辑.    /// </summary>    /// <param name="navigateView">要进行导航的视图.</param>    /// <param name="currentView">当前的视图.</param>    private async Task NavigateToViewAsync(ModuleInfo navigateView, ModuleInfo? currentView)    {        Trace.WriteLine($"【{navigateView.Name}】NavigateToViewAsync");        this.IsNavigating = true;        string viewNameLocalized = this.GetString(navigateView.Name);        try        {            // 准备导航参数.            Type? viewType = navigateView.ModuleType ?? typeof(DefaultView);            string targetName = viewType.Name;            NavigationParameters keys = new NavigationParameters()            {                { Constraints.CurrentView, navigateView }            };            if (this.IsUseModuleHost)            {                targetName = nameof(ModuleHostView);                keys.Add(Constraints.RegionName, this.RegionName);                keys.Add(Constraints.TargetView, viewType);            }            this.OnConfigureNavigationRequested(keys);            var sw = Stopwatch.StartNew();            IRegionManager? regionManager = this.scopedRegionManager ?? this.RegionManager;            regionManager?.RequestNavigate(                RegionName,                targetName,                result =>                {                    sw.Stop();                    if (result.Success == true)                    {                        // Case 1: 导航成功                        // LogRun.Trace($"{viewNameLocalized} 导航到区域 {this.RegionName} 成功，耗时 {sw.ElapsedMilliseconds} ms");                    }                    else                    {                        // 注意：导航回调可能在UI线程上执行                        if (result.Exception != null)                        {                            LogRun.Error(result.Exception);                            _ = this.ErrorAsync(result.Exception.ToString());                        }                        else if (result.Cancelled)                        {                            // 如果 result.Success 为 false，说明导航被 IConfirmNavigationRequest 取消了。                            // 导航被取消（例如，因为权限不足），我们需要将UI的选中状态回滚。                            this.selectedView = currentView;                            OnPropertyChanged(nameof(SelectedView));                        }                        else                        {                            // 理论上不应该发生，但作为防御性编程，记录未知失败                            LogRun.Warn(GetString($"导航到 {viewNameLocalized} 失败，原因未知。"));                        }                    }                    if (!result.Success && result.Cancelled)                    {                        IsContentLoading = false;                    }                    this.IsNavigating = false;                },                keys);        }        catch (Exception ex)        {            this.IsNavigating = false;            this.IsContentLoading = false;            LogRun.Error(ex, $"{viewNameLocalized} 导航到区域{this.RegionName} 出错！");            _ = await this.ErrorAsync(ex.ToString());        }    }    /// <inheritdoc/>    public void SetScopedRegionManager(IRegionManager? scopedRegionManager)    {        this.scopedRegionManager = scopedRegionManager;    }    /// <summary>    /// 校验是否具有导航过去的权限.    /// </summary>    /// <param name="navigateView">要进行导航的视图.</param>    /// <param name="currentView">当前的视图.</param>    /// <param name="moduleService">用于校验权限的模块服务.</param>    /// <returns>返回 是否可以导航.</returns>    protected virtual bool CanNavigate(ModuleInfo? navigateView, ModuleInfo? currentView, IModuleService moduleService)    {        // 在这里执行权限验证！        // 从导航参数中获取我们之前传递的目标模块信息        if (navigateView == null || moduleService.Verify(navigateView))        {            return true;        }        // 使用基类的 WarnAsync 方法发出警告        _ = this.WarnAsync(this.GetString("权限不够，请登录更高权限"));        this.selectedView = currentView;        OnPropertyChanged(nameof(SelectedView));        return false;    }    /// <summary>    /// 请求初始化视图时调用.    /// </summary>    /// <param name="parameters">可选的导航参数，为初始化过程提供上下文.</param>    protected virtual void OnInitializeViewsRequested(INavigationParameters? parameters)    {    }    /// <summary>    /// 处理导航配置请求事件.    /// </summary>    /// <param name="keys">包含用于配置导航的键值对的导航参数.</param>    protected virtual void OnConfigureNavigationRequested(INavigationParameters keys)    {    }}