using BgCommon.Localization;namespace BgCommon.Prism.Wpf.MVVM;/// <summary>/// VM基类./// </summary>public abstract class ViewModelBase : ObservableValidator, IActiveAware{    private readonly IContainerExtension container;    private bool isActive = false;    private IAsyncRelayCommand? loadedCommand = null;    private IAsyncRelayCommand? unloadedCommand = null;    private Visibility visibility = Visibility.Visible;    public ViewModelBase(IContainerExtension container)    {        ArgumentNullException.ThrowIfNull(nameof(container));        this.container = container;        if (this.TryResolve(out IEventAggregator? eventAggregator))        {            this.EventAggregator = eventAggregator;        }        if (this.TryResolve(out IRegionManager? regionManager))        {            this.RegionManager = regionManager;        }        if (this.TryResolve(out IDialogService? dialogService))        {            this.DialogService = dialogService;        }        if (this.TryResolve(out ILocalizationProvider? localizationProvider))        {            this.LocalizationProvider = localizationProvider;        }    }    /// <summary>    /// Gets 容器实例.    /// </summary>    public IContainerExtension Container => container;    /// <summary>    /// Gets 事件聚合.    /// </summary>    public IEventAggregator? EventAggregator { get; }    /// <summary>    /// Gets 模块区域管理.    /// </summary>    public IRegionManager? RegionManager { get; }    /// <summary>    /// Gets 弹窗服务.    /// </summary>    public IDialogService? DialogService { get; }    /// <summary>    /// Gets 本地化服务    /// </summary>    public ILocalizationProvider? LocalizationProvider { get; }    /// <summary>    /// Gets or sets a value indicating whether  获取或设置一个值，该值指示 ViewModel 当前是否处于活动状态。    /// </summary>    public bool IsActive    {        get        {            return isActive;        }        set        {            if (SetProperty(ref isActive, value))            {                IsActiveChanged?.Invoke(this, EventArgs.Empty);                if (isActive)                {                    OnActivated();                }                else                {                    OnDeactivated();                }            }        }    }    public event EventHandler? IsActiveChanged;    /// <summary>    /// Gets or sets a value indicating whether 该值指示视图在UI中是否可见。    /// </summary>    public Visibility Visibility    {        get => visibility;        set => SetProperty(ref visibility, value);    }    /// <summary>    /// Gets 获取当视图加载时执行的命令。    /// </summary>    public IAsyncRelayCommand LoadedCommand => loadedCommand ??= new AsyncRelayCommand<object?>(OnLoadedAsync);    /// <summary>    /// Gets 获取当视图卸载时执行的命令。    /// </summary>    public IAsyncRelayCommand UnloadedCommand => unloadedCommand ??= new AsyncRelayCommand<object?>(OnUnloadAsync);    /// <summary>    /// 当关联的视图加载完成后执行的方法。(异步)    /// </summary>    /// <param name="parameter">参数</param>    protected virtual Task OnLoadedAsync(object? parameter)    {        return Task.CompletedTask;    }    /// <summary>    /// 当关联的视图卸载时执行的方法(异步).    /// </summary>    /// <param name="parameter">参数.</param>    protected virtual Task OnUnloadAsync(object? parameter)    {        return Task.CompletedTask;    }    /// <summary>    /// 当 ViewModel 变为活动状态时调用。用于订阅事件。    /// </summary>    protected virtual void OnActivated()    {        // 订阅区域语言发生变化        _ = this.Subscribe<ILocalizationProvider?>(OnCultureChanged);    }    /// <summary>    /// 当 ViewModel 变为非活动状态时调用。用于取消订阅事件。    /// </summary>    protected virtual void OnDeactivated()    {        // 取消订阅区域语言变化        this.Unsubscribe<ILocalizationProvider?>(OnCultureChanged);    }    /// <summary>    /// 语言发生变化，用于接收多语言发生变更的消息.    /// </summary>    /// <param name="provider">多语言实例</param>    protected virtual void OnCultureChanged(ILocalizationProvider? provider) { }    /// <summary>    /// 获取多语言字符串资源。    /// </summary>    /// <param name="key">关键字</param>    /// <param name="args">可变格式化字符串参数</param>    /// <returns>多语言字符串资源</returns>    protected string GetString(string key, params object[] args)    {        Assembly? assembly = Assembly.GetCallingAssembly();        return GetStringEx(assembly?.GetName()?.Name, key, args);    }    /// <summary>    /// 获取多语言字符串资源    /// </summary>    /// <param name="assemblyName">资源包所在程序集名称</param>    /// <param name="key">关键字</param>    /// <param name="args">可变格式化字符串参数</param>    /// <returns>多语言字符串资源</returns>    protected string GetStringEx(string? assemblyName, string key, params object[] args)    {        string localizeString = LocalizationProvider?.GetString(key, assemblyName) ?? key;        if (args.Length > 0)        {            return string.Format(localizeString, args);        }        else        {            return localizeString;        }    }}