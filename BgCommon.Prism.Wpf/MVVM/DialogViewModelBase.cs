using BgCommon.Prism.Wpf.Services;namespace BgCommon.Prism.Wpf.MVVM;/// <summary>/// Dialog ViewModel 基类./// </summary>public abstract partial class DialogViewModelBase : ViewModelBase, IDialogAware{    private readonly IGlobalVarService globalVarService;    [ObservableProperty]    private string title = string.Empty;    [ObservableProperty]    private string appIcon = string.Empty;    [ObservableProperty]    private ButtonResult result = ButtonResult.None;    public DialogCloseListener RequestClose { get; private set; }    public DialogViewModelBase(IContainerExtension container)        : base(container)    {        this.globalVarService = container.Resolve<IGlobalVarService>();        string? iconFIlePath = this.globalVarService.GetAppIconImage();        if (string.IsNullOrEmpty(iconFIlePath) || !System.IO.File.Exists(iconFIlePath))        {            iconFIlePath = "pack://application:,,,/BgCommon.Prism.Wpf;component/Assets/Images/icon.ico";        }        this.AppIcon = iconFIlePath;    }    /// <summary>    /// 是否可关闭弹窗    /// </summary>    /// <returns>true:可以 false:否 </returns>    public virtual bool CanCloseDialog() => true;    /// <summary>    /// 弹窗关闭时    /// </summary>    public virtual void OnDialogClosed() { }    /// <summary>    /// 弹窗显示出来    /// </summary>    /// <param name="parameters">参数</param>    public abstract void OnDialogOpened(IDialogParameters parameters);    /// <summary>    /// Ok    /// </summary>    [RelayCommand(CanExecute = nameof(OnOkCanExecute))]    private void Ok(object? parameter)    {        IDialogParameters keys = new DialogParameters();        if (OnOK(parameter, ref keys))        {            Result = ButtonResult.OK;            OnRequestClose(Result, keys);        }    }    /// <summary>    /// Cancel    /// </summary>    [RelayCommand(CanExecute = nameof(OnCancelCanExecute))]    private void Cancel(object? parameter)    {        IDialogParameters keys = new DialogParameters();        if (OnCancel(parameter, ref keys))        {            Result = ButtonResult.Cancel;            OnRequestClose(Result, keys);        }    }    /// <summary>    /// Ignore    /// </summary>    [RelayCommand(CanExecute = nameof(OnIgnoreCanExecute))]    private void Ignore(object? parameter)    {        IDialogParameters keys = new DialogParameters();        if (OnIgnore(parameter, ref keys))        {            Result = ButtonResult.Ignore;            OnRequestClose(Result, keys);        }    }    /// <summary>    /// Retry    /// </summary>    [RelayCommand(CanExecute = nameof(OnRetryCanExecute))]    private void Retry(object? parameter)    {        IDialogParameters keys = new DialogParameters();        if (OnRetry(parameter, ref keys))        {            Result = ButtonResult.Retry;            OnRequestClose(Result, keys);        }    }    /// <summary>    /// No    /// </summary>    [RelayCommand(CanExecute = nameof(OnNoCanExecute))]    private void No(object? parameter)    {        IDialogParameters keys = new DialogParameters();        if (OnNo(parameter, ref keys))        {            Result = ButtonResult.No;            OnRequestClose(Result, keys);        }    }    /// <summary>    /// 请求关闭弹窗    /// </summary>    /// <param name="buttonResult">弹窗结果.</param>    /// <param name="parameters">>弹窗参数.</param>    private void OnRequestClose(ButtonResult buttonResult, IDialogParameters? parameters = null)    {        Result = buttonResult;        RequestClose.Invoke(new DialogResult(Result) { Parameters = parameters ?? new DialogParameters() });    }    /// <summary>    /// 请求关闭弹窗.    /// </summary>    /// <param name="result">弹窗结果.</param>    /// <param name="configure">配置弹窗回调参数.</param>    protected void OnRequestClose(ButtonResult result, Action<IDialogParameters>? configure = null)    {        IDialogParameters keys = new DialogParameters();        if (configure != null)        {            configure.Invoke(keys);        }        RequestClose.Invoke(keys, result);    }    protected virtual bool OnOK(object? parameter, ref IDialogParameters keys) => true;    protected virtual bool OnCancel(object? parameter, ref IDialogParameters keys) => true;    protected virtual bool OnIgnore(object? parameter, ref IDialogParameters keys) => true;    protected virtual bool OnRetry(object? parameter, ref IDialogParameters keys) => true;    protected virtual bool OnNo(object? parameter, ref IDialogParameters keys) => true;    protected virtual bool OnOkCanExecute(object? parameter) => true;    protected virtual bool OnCancelCanExecute(object? parameter) => true;    protected virtual bool OnIgnoreCanExecute(object? parameter) => true;    protected virtual bool OnRetryCanExecute(object? parameter) => true;    protected virtual bool OnNoCanExecute(object? parameter) => true;}