namespace BgCommon.Prism.Wpf.DependencyInjection.Implementation;/// <summary>/// Prism IOC 注入服务的实现/// </summary>internal sealed class DynamicRegistrationService : IRegistrationService{    private readonly IContainerExtension containerRegistry;    public DynamicRegistrationService(IContainerExtension container)    {        containerRegistry = container;    }    /// <inheritdoc/>    public void RegisterViews()    {        // 获取所有已加载的程序集        Assembly[] assemblies = AppDomain.CurrentDomain.GetAssemblies();        for (int i = 0; i < assemblies.Length; i++)        {            RegisterViews(assemblies[i]);        }    }    /// <inheritdoc/>    public void RegisterViews(Assembly assembly)    {        try        {            // 先找实现IRegistration 的 View Type            Type[] viewTypes = assembly.GetTypes()                                       .Where(t => typeof(FrameworkElement).IsAssignableFrom(t) && typeof(IRegistration).IsAssignableFrom(t) && !t.IsAbstract)                                       .ToArray();            if (viewTypes.Length > 0)            {                Debug.WriteLine($"Assembly {assembly.GetName().Name}, {viewTypes.Length} Views need register......");            }            for (int i = 0; i < viewTypes.Length; i++)            {                RegisterView(viewTypes[i], viewTypes[i].Name);                Debug.Write($"[{(i + 1).ToString().PadLeft(2, ' ')}]");            }        }        catch (Exception)        {            if (!assembly.FullName!.StartsWith("Microsoft.Web.WebView2"))            {                throw;            }        }    }    /// <inheritdoc/>    public void RegisterView<[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors | DynamicallyAccessedMemberTypes.NonPublicConstructors)] TView>(string? viewName = "")          where TView : IRegistration    {        Type type = typeof(TView);        RegisterView(type, viewName);    }    /// <inheritdoc/>    public void RegisterView(Type viewType, string? viewName)    {        if (!typeof(FrameworkElement).IsAssignableFrom(viewType))        {            throw new ArgumentException($"The {viewType.Name} Type does not implement from FrameworkElement. ");        }        if (string.IsNullOrEmpty(viewName))        {            viewName = viewType.Name;        }        // 获取 RegistrationAttribute 特性        var registrationAttri = viewType.GetCustomAttributes(typeof(RegistrationAttribute)).ToArray().FirstOrDefault() as RegistrationAttribute;        if (registrationAttri != null)        {            // 注入ViewModel            if (registrationAttri.ViewModelType != null)            {                ViewModelLocationProvider.Register(viewType.ToString(), registrationAttri.ViewModelType);            }            Debug.WriteLine($" Register {registrationAttri.Mode.ToString()} {viewName}......");            // 注入视图            switch (registrationAttri.Mode)            {                case Registration.Many:                    _ = containerRegistry.RegisterMany(viewType, registrationAttri.ServiceTypes);                    break;                case Registration.ManySingleton:                    _ = containerRegistry.RegisterManySingleton(viewType, registrationAttri.ServiceTypes);                    break;                case Registration.Scope:                    _ = containerRegistry.RegisterScoped(typeof(IRegistration), viewType);                    break;                case Registration.DialogWindow:                    if (!string.IsNullOrEmpty(registrationAttri.DialogName))                    {                        _ = containerRegistry.Register(typeof(IDialogWindow), viewType, registrationAttri.DialogName);                    }                    else                    {                        _ = containerRegistry.Register(typeof(IDialogWindow), viewType);                    }                    break;                case Registration.Dialog:                    containerRegistry.RegisterForNavigation(viewType, viewName);                    break;                case Registration.Navigation:                    containerRegistry.RegisterForNavigation(viewType, viewName);                    break;                case Registration.Singleton:                    _ = containerRegistry.RegisterSingleton(typeof(IRegistration), viewType, viewName);                    break;                case Registration.Normal:                    _ = containerRegistry.Register(typeof(IRegistration), viewType, viewName);                    break;                default:                    break;            }            return;        }    }}