using BgCommon.Prism.Wpf.Controls.Models;using BgControls.Data;namespace BgCommon.Prism.Wpf.Controls.Services;/// <summary>/// 一个流畅的构建器（Fluent Builder），用于动态创建并显示一个输入对话框。/// </summary>public class InputDialogBuilder{    private readonly IDialogService _dialogService;    private readonly List<InputContent> _inputContents = new();    private string _title = "请输入参数"; // 默认标题    private string _okButtonText = "确定";    private string _cancelButtonText = "取消";    private int _currentIndex = 1;    /// <summary>    /// Initializes a new instance of the <see cref="InputDialogBuilder"/> class.    /// 构造函数被设为 internal，以强制通过 IDialogService 的扩展方法来创建实例。    /// </summary>    /// <param name="dialogService">Prism 对话框服务实例。</param>    /// <exception cref="ArgumentNullException">当 dialogService 为 null 时抛出。</exception>    internal InputDialogBuilder(IDialogService dialogService)    {        _dialogService = dialogService ?? throw new ArgumentNullException(nameof(dialogService));    }    /// <summary>    /// 设置对话框的标题。    /// </summary>    /// <param name="title">对话框窗口的标题文本。</param>    /// <returns>当前的 <see cref="InputDialogBuilder"/> 实例，以便进行链式调用。</returns>    public InputDialogBuilder WithTitle(string title)    {        if (!string.IsNullOrWhiteSpace(title))        {            _title = title;        }        return this;    }    /// <summary>    /// 设置“确定”按钮的文本。    /// </summary>    /// <param name="text">按钮上显示的文本。</param>    /// <returns>当前的 <see cref="InputDialogBuilder"/> 实例，以便进行链式调用。</returns>    public InputDialogBuilder WithOkButton(string text)    {        if (!string.IsNullOrWhiteSpace(text))        {            _okButtonText = text;        }        return this;    }    /// <summary>    /// 设置“取消”按钮的文本。    /// </summary>    /// <param name="text">按钮上显示的文本。</param>    /// <returns>当前的 <see cref="InputDialogBuilder"/> 实例，以便进行链式调用。</returns>    public InputDialogBuilder WithCancelButton(string text)    {        if (!string.IsNullOrWhiteSpace(text))        {            _cancelButtonText = text;        }        return this;    }    /// <summary>    /// 添加一个通用的文本输入框。    /// </summary>    /// <param name="labelText">输入框旁边的标签文本。</param>    /// <param name="defaultValue">文本框中显示的默认值。</param>    /// <param name="textType">文本类型（用于验证，如 Phone, Mail, Common 等）。</param>    /// <returns>当前的 <see cref="InputDialogBuilder"/> 实例，以便进行链式调用。</returns>    public InputDialogBuilder AddTextInput(string labelText, string defaultValue = "", TextType textType = TextType.Common)    {        var content = new InputContent(_currentIndex++, labelText, textType, defaultValue);        _inputContents.Add(content);        return this;    }    /// <summary>    /// 添加一个用于输入 double 类型数值的输入框。    /// </summary>    /// <param name="labelText">标签文本。</param>    /// <param name="defaultValue">默认的数值。</param>    /// <param name="decimalPlaces">允许的小数位数。</param>    /// <returns>当前的 <see cref="InputDialogBuilder"/> 实例，以便进行链式调用。</returns>    public InputDialogBuilder AddDoubleInput(string labelText, double defaultValue = 0, int decimalPlaces = 2)    {        var content = new InputContent(_currentIndex++, labelText, TextType.Double, defaultValue, decimalPlaces);        _inputContents.Add(content);        return this;    }    /// <summary>    /// 添加一个用于输入无符号（正数） double 类型数值的输入框。    /// </summary>    /// <param name="labelText">标签文本。</param>    /// <param name="defaultValue">默认的数值。</param>    /// <param name="decimalPlaces">允许的小数位数。</param>    /// <returns>当前的 <see cref="InputDialogBuilder"/> 实例，以便进行链式调用。</returns>    public InputDialogBuilder AddUDoubleInput(string labelText, double defaultValue = 0, int decimalPlaces = 2)    {        var content = new InputContent(_currentIndex++, labelText, TextType.PDouble, defaultValue, decimalPlaces);        _inputContents.Add(content);        return this;    }    /// <summary>    /// 添加一个用于输入 float 类型数值的输入框。    /// </summary>    /// <param name="labelText">标签文本。</param>    /// <param name="defaultValue">默认的数值。</param>    /// <param name="decimalPlaces">允许的小数位数。</param>    /// <returns>当前的 <see cref="InputDialogBuilder"/> 实例，以便进行链式调用。</returns>    public InputDialogBuilder AddFloatInput(string labelText, float defaultValue = 0f, int decimalPlaces = 2)    {        var content = new InputContent(_currentIndex++, labelText, TextType.Float, defaultValue, decimalPlaces);        _inputContents.Add(content);        return this;    }    /// <summary>    /// 添加一个用于输入无符号（正数） float 类型数值的输入框。    /// </summary>    /// <param name="labelText">标签文本。</param>    /// <param name="defaultValue">默认的数值。</param>    /// <param name="decimalPlaces">允许的小数位数。</param>    /// <returns>当前的 <see cref="InputDialogBuilder"/> 实例，以便进行链式调用。</returns>    public InputDialogBuilder AddUFloatInput(string labelText, float defaultValue = 0f, int decimalPlaces = 2)    {        var content = new InputContent(_currentIndex++, labelText, TextType.PFloat, defaultValue, decimalPlaces);        _inputContents.Add(content);        return this;    }    /// <summary>    /// 添加一个用于输入 int (整数) 类型数值的输入框。    /// </summary>    /// <param name="labelText">标签文本。</param>    /// <param name="defaultValue">默认的整数值。</param>    /// <returns>当前的 <see cref="InputDialogBuilder"/> 实例，以便进行链式调用。</returns>    public InputDialogBuilder AddIntInput(string labelText, int defaultValue = 0)    {        var content = new InputContent(_currentIndex++, labelText, TextType.Int, defaultValue, 0);        _inputContents.Add(content);        return this;    }    /// <summary>    /// 添加一个用于输入 uint (无符号整数) 类型数值的输入框。    /// </summary>    /// <param name="labelText">标签文本。</param>    /// <param name="defaultValue">默认的无符号整数值。</param>    /// <returns>当前的 <see cref="InputDialogBuilder"/> 实例，以便进行链式调用。</returns>    public InputDialogBuilder AddUIntInput(string labelText, uint defaultValue = 0)    {        // 修正：原代码使用了 TextType.Int，这里应使用表示正整数的类型（假设为 PInt）        var content = new InputContent(_currentIndex++, labelText, TextType.PInt, defaultValue, 0);        _inputContents.Add(content);        return this;    }    /// <summary>    /// 添加一个用于输入 short 类型数值的输入框。    /// </summary>    /// <param name="labelText">标签文本。</param>    /// <param name="defaultValue">默认的 short 值。</param>    /// <returns>当前的 <see cref="InputDialogBuilder"/> 实例，以便进行链式调用。</returns>    public InputDialogBuilder AddShortInput(string labelText, short defaultValue = 0)    {        var content = new InputContent(_currentIndex++, labelText, TextType.Short, defaultValue, 0);        _inputContents.Add(content);        return this;    }    /// <summary>    /// 添加一个用于输入 ushort 类型数值的输入框。    /// </summary>    /// <param name="labelText">标签文本。</param>    /// <param name="defaultValue">默认的 ushort 值。</param>    /// <returns>当前的 <see cref="InputDialogBuilder"/> 实例，以便进行链式调用。</returns>    public InputDialogBuilder AddUShortInput(string labelText, ushort defaultValue = 0)    {        var content = new InputContent(_currentIndex++, labelText, TextType.PShort, defaultValue, 0);        _inputContents.Add(content);        return this;    }    /// <summary>    /// 添加一个日期时间选择器。    /// </summary>    /// <param name="labelText">标签文本。</param>    /// <param name="defaultValue">默认的日期时间。如果为 null，则使用当前时间。</param>    /// <returns>当前的 <see cref="InputDialogBuilder"/> 实例，以便进行链式调用。</returns>    public InputDialogBuilder AddDateTimeInput(string labelText, DateTime? defaultValue = null)    {        var content = new InputContent(_currentIndex++, labelText, TextType.DateTime, defaultValue ?? DateTime.Now);        _inputContents.Add(content);        return this;    }    /// <summary>    /// 添加一个复选框。    /// </summary>    /// <param name="labelText">复选框旁边的标签文本。</param>    /// <param name="defaultValue">默认的选中状态。</param>    /// <returns>当前的 <see cref="InputDialogBuilder"/> 实例，以便进行链式调用。</returns>    public InputDialogBuilder AddBooleanInput(string labelText, bool defaultValue = false)    {        var content = new InputContent(_currentIndex++, labelText, TextType.Boolean, defaultValue);        _inputContents.Add(content);        return this;    }    #region 批量输入项添加方法 (新增)    /// <summary>    /// 批量添加多个文本输入框，所有输入框使用默认值。    /// </summary>    /// <param name="labels">要添加的每个输入框的标签文本列表。</param>    /// <returns>当前的 <see cref="InputDialogBuilder"/> 实例，以便进行链式调用。</returns>    public InputDialogBuilder AddTextInputs(params string[] labels)    {        if (labels == null || labels.Length == 0)        {            return this;        }        foreach (var label in labels)        {            _ = AddTextInput(label); // 调用单个添加方法，使用其默认值        }        return this;    }    /// <summary>    /// 批量添加多个文本输入框，并为每个输入框指定默认值。    /// </summary>    /// <param name="inputsWithDefaults">一个字典，其中键是标签文本，值是对应的默认值。</param>    /// <returns>当前的 <see cref="InputDialogBuilder"/> 实例，以便进行链式调用。</returns>    public InputDialogBuilder AddTextInputs(IDictionary<string, string> inputsWithDefaults)    {        if (inputsWithDefaults == null || inputsWithDefaults.Count == 0)        {            return this;        }        foreach (KeyValuePair<string, string> pair in inputsWithDefaults)        {            _ = AddTextInput(pair.Key, pair.Value);        }        return this;    }    /// <summary>    /// 批量添加多个整数输入框，所有输入框使用默认值。    /// </summary>    /// <param name="labels">要添加的每个输入框的标签文本列表。</param>    /// <returns>当前的 <see cref="InputDialogBuilder"/> 实例，以便进行链式调用。</returns>    public InputDialogBuilder AddIntInputs(params string[] labels)    {        if (labels == null || labels.Length == 0)        {            return this;        }        foreach (var label in labels)        {            _ = AddIntInput(label); // 调用单个添加方法，使用其默认值        }        return this;    }    /// <summary>    /// 批量添加多个整数输入框，并为每个输入框指定默认值。    /// </summary>    /// <param name="inputsWithDefaults">一个字典，其中键是标签文本，值是对应的默认整数值。</param>    /// <returns>当前的 <see cref="InputDialogBuilder"/> 实例，以便进行链式调用。</returns>    public InputDialogBuilder AddIntInputs(IDictionary<string, int> inputsWithDefaults)    {        if (inputsWithDefaults == null || inputsWithDefaults.Count == 0)        {            return this;        }        foreach (KeyValuePair<string, int> pair in inputsWithDefaults)        {            _ = AddIntInput(pair.Key, pair.Value);        }        return this;    }    /// <summary>    /// 批量添加多个整数输入框，所有输入框使用默认值。    /// </summary>    /// <param name="labels">要添加的每个输入框的标签文本列表。</param>    /// <returns>当前的 <see cref="InputDialogBuilder"/> 实例，以便进行链式调用。</returns>    public InputDialogBuilder AddShortInputs(params string[] labels)    {        if (labels == null || labels.Length == 0)        {            return this;        }        foreach (var label in labels)        {            _ = AddShortInput(label); // 调用单个添加方法，使用其默认值        }        return this;    }    /// <summary>    /// 批量添加多个整数输入框，并为每个输入框指定默认值。    /// </summary>    /// <param name="inputsWithDefaults">一个字典，其中键是标签文本，值是对应的默认整数值。</param>    /// <returns>当前的 <see cref="InputDialogBuilder"/> 实例，以便进行链式调用。</returns>    public InputDialogBuilder AddShortInputs(IDictionary<string, short> inputsWithDefaults)    {        if (inputsWithDefaults == null || inputsWithDefaults.Count == 0)        {            return this;        }        foreach (KeyValuePair<string, short> pair in inputsWithDefaults)        {            _ = AddShortInput(pair.Key, pair.Value);        }        return this;    }    /// <summary>    /// 批量添加多个 Double 输入框，所有输入框使用统一的设置（小数位数和默认值）。    /// </summary>    /// <param name="decimalPlaces">所有输入框统一的小数位数。</param>    /// <param name="labels">要添加的每个输入框的标签文本列表。</param>    /// <returns>当前的 <see cref="InputDialogBuilder"/> 实例，以便进行链式调用。</returns>    public InputDialogBuilder AddDoubleInputs(int decimalPlaces = 2, params string[] labels)    {        if (labels == null || labels.Length == 0)        {            return this;        }        foreach (var label in labels)        {            _ = AddDoubleInput(label, 0, decimalPlaces); // 调用单个添加方法，使用默认值 0        }        return this;    }    /// <summary>    /// 批量添加多个 Double 输入框，并为每个输入框指定默认值。    /// </summary>    /// <param name="inputsWithDefaults">一个字典，其中键是标签文本，值是对应的默认 Double 值。</param>    /// <param name="decimalPlaces">所有输入框统一的小数位数。</param>    /// <returns>当前的 <see cref="InputDialogBuilder"/> 实例，以便进行链式调用。</returns>    public InputDialogBuilder AddDoubleInputs(IDictionary<string, double> inputsWithDefaults, int decimalPlaces = 2)    {        if (inputsWithDefaults == null || inputsWithDefaults.Count == 0)        {            return this;        }        foreach (KeyValuePair<string, double> pair in inputsWithDefaults)        {            _ = AddDoubleInput(pair.Key, pair.Value, decimalPlaces);        }        return this;    }    /// <summary>    /// 批量添加多个 float 输入框，所有输入框使用统一的设置（小数位数和默认值）。    /// </summary>    /// <param name="decimalPlaces">所有输入框统一的小数位数。</param>    /// <param name="labels">要添加的每个输入框的标签文本列表。</param>    /// <returns>当前的 <see cref="InputDialogBuilder"/> 实例，以便进行链式调用。</returns>    public InputDialogBuilder AddFloatInputs(int decimalPlaces = 2, params string[] labels)    {        if (labels == null || labels.Length == 0)        {            return this;        }        foreach (var label in labels)        {            _ = AddFloatInput(label, 0, decimalPlaces); // 调用单个添加方法，使用默认值 0        }        return this;    }    /// <summary>    /// 批量添加多个 float 输入框，并为每个输入框指定默认值。    /// </summary>    /// <param name="inputsWithDefaults">一个字典，其中键是标签文本，值是对应的默认 Double 值。</param>    /// <param name="decimalPlaces">所有输入框统一的小数位数。</param>    /// <returns>当前的 <see cref="InputDialogBuilder"/> 实例，以便进行链式调用。</returns>    public InputDialogBuilder AddFloatInputs(IDictionary<string, float> inputsWithDefaults, int decimalPlaces = 2)    {        if (inputsWithDefaults == null || inputsWithDefaults.Count == 0)        {            return this;        }        foreach (KeyValuePair<string, float> pair in inputsWithDefaults)        {            _ = AddFloatInput(pair.Key, pair.Value, decimalPlaces);        }        return this;    }    /// <summary>    /// 批量添加多个 float 输入框，所有输入框使用统一的设置（小数位数和默认值）。    /// </summary>    /// <param name="labels">要添加的每个输入框的标签文本列表。</param>    /// <returns>当前的 <see cref="InputDialogBuilder"/> 实例，以便进行链式调用。</returns>    public InputDialogBuilder AddDateTimeInputs(params string[] labels)    {        if (labels == null || labels.Length == 0)        {            return this;        }        foreach (var label in labels)        {            _ = AddDateTimeInput(label, DateTime.Now);        }        return this;    }    /// <summary>    /// 批量添加多个 DateTime 输入框，并为每个输入框指定默认值。    /// </summary>    /// <param name="inputsWithDefaults">一个字典，其中键是标签文本，值是对应的默认 Double 值。</param>    /// <returns>当前的 <see cref="InputDialogBuilder"/> 实例，以便进行链式调用。</returns>    public InputDialogBuilder AddDateTimeInputs(IDictionary<string, DateTime> inputsWithDefaults)    {        if (inputsWithDefaults == null || inputsWithDefaults.Count == 0)        {            return this;        }        foreach (KeyValuePair<string, DateTime> pair in inputsWithDefaults)        {            _ = AddDateTimeInput(pair.Key, pair.Value);        }        return this;    }    /// <summary>    /// 批量添加多个 Boolean 输入框，所有输入框使用统一的设置（小数位数和默认值）。    /// </summary>    /// <param name="labels">要添加的每个输入框的标签文本列表。</param>    /// <returns>当前的 <see cref="InputDialogBuilder"/> 实例，以便进行链式调用。</returns>    public InputDialogBuilder AddBooleanInput(params string[] labels)    {        if (labels == null || labels.Length == 0)        {            return this;        }        foreach (var label in labels)        {            _ = AddBooleanInput(label);        }        return this;    }    /// <summary>    /// 批量添加多个 Boolean 输入框，并为每个输入框指定默认值。    /// </summary>    /// <param name="inputsWithDefaults">一个字典，其中键是标签文本，值是对应的默认 Double 值。</param>    /// <returns>当前的 <see cref="InputDialogBuilder"/> 实例，以便进行链式调用。</returns>    public InputDialogBuilder AddBooleanInputs(IDictionary<string, bool> inputsWithDefaults)    {        if (inputsWithDefaults == null || inputsWithDefaults.Count == 0)        {            return this;        }        foreach (KeyValuePair<string, bool> pair in inputsWithDefaults)        {            _ = AddBooleanInput(pair.Key, pair.Value);        }        return this;    }    #endregion    /// <summary>    /// （终止方法）构建并异步显示对话框。    /// </summary>    /// <returns>    /// 一个表示异步操作的任务。任务结果包含一个 <see cref="InputContent"/> 数组，其中含有用户的输入结果。    /// 如果用户取消对话框，或未添加任何输入项，则返回 <c>null</c>。    /// </returns>    public async Task<InputContent[]?> ShowDialogAsync()    {        if (_inputContents.Count == 0)        {            // 如果没有添加任何输入项，直接返回 null，不显示对话框            return null;        }        var parameters = new DialogParameters            {                { Constraints.Title, _title },                { Constraints.OkButtonText, _okButtonText },                { Constraints.CancelButtonText, _cancelButtonText },                { Constraints.Parameters, _inputContents.ToArray() } // 核心负载            };        IDialogResult result = await _dialogService.ShowDialogAsync(nameof(InputMessageView), parameters);        if (result.Result == ButtonResult.OK &&            result.Parameters.TryGetValue(Constraints.Results, out InputContent[]? resultArray))        {            return resultArray;        }        return null; // 用户点击了取消或发生其他情况    }}