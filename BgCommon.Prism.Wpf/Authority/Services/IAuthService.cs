using BgCommon.Prism.Wpf.Authority.Entities;using BgCommon.Prism.Wpf.Authority.Models;namespace BgCommon.Prism.Wpf.Authority.Services;/// <summary>/// 认证与校验服务./// </summary>public interface IAuthService{    /// <summary>    /// 用户登陆授权.    /// </summary>    /// <param name="userName">用户名.</param>    /// <param name="password">用户密码.</param>    /// <returns>是否成功登陆</returns>    Task<AuthorityResult> LoginAsync(string userName, string password);    /// <summary>    /// 注销登陆    /// </summary>    /// <param name="userId">用户编号.</param>    /// <returns>是否成功注销登陆</returns>    Task<AuthorityResult> LogoutAsync(long userId);    /// <summary>    /// 校验是否具有操作权限.    /// </summary>    /// <param name="operatorUserId">进行操作的用户编号.</param>    /// <param name="requiredPermissionCode">操作代码.</param>    /// <returns>返回 是否具有操作权限.</returns>    Task<AuthorityResult> VerifyPermissionAsync(long operatorUserId, string requiredPermissionCode);    /// <summary>    /// 校验当前用户是否有权限访问指定模块的特定操作.<br/>    /// 当 actionCode 为空时, 使用 Authority 等级进行粗粒度访问校验.<br/>    /// 当 actionCode 不为空时, 使用 Permission.Code 进行细粒度操作校验.<br/>    /// </summary>    /// <param name="operatorUser">当前用户.</param>    /// <param name="moduleId">模块实例Id.</param>    /// <param name="actionCode">操作的权限码 (对应 Permission.Code). 如果为空, 则检查模块访问权.</param>    /// <returns>返回是否允许访问.</returns>    Task<AuthorityResult> VerifyAsync(UserInfo operatorUser, long moduleId, string? actionCode = "");}