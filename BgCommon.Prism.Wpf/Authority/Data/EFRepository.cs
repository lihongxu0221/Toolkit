using Microsoft.EntityFrameworkCore;namespace BgCommon.Prism.Wpf.Authority.Data;public class EFRepository<T> : IRepository<T>    where T : class{    private readonly AuthorityDbContextSqlite _dbContext;    public EFRepository(AuthorityDbContextSqlite dbContext)    {        _dbContext = dbContext;    }    public virtual async Task<T?> GetByIdAsync(object id)    {        return await _dbContext.Set<T>().FindAsync(id);    }    public async Task<List<T>> ListAllAsync()    {        return await _dbContext.Set<T>().ToListAsync();    }    public IQueryable<T> AsQueryable()    {        return _dbContext.Set<T>();    }    public async Task<T> AddAsync(T entity)    {        _ = await _dbContext.Set<T>().AddAsync(entity);        _ = await _dbContext.SaveChangesAsync();        return entity;    }    public async Task UpdateAsync(T entity)    {        _ = _dbContext.Entry(entity).State = EntityState.Modified;        _ = await _dbContext.SaveChangesAsync();    }    public async Task DeleteAsync(T entity)    {        _ = _dbContext.Set<T>().Remove(entity);        _ = await _dbContext.SaveChangesAsync();    }    public async Task<bool> AnyAsync(System.Linq.Expressions.Expression<Func<T, bool>> predicate)    {        return await _dbContext.Set<T>().AnyAsync(predicate);    }    public async Task<T?> FirstOrDefaultAsync(System.Linq.Expressions.Expression<Func<T, bool>> predicate)    {        return await _dbContext.Set<T>().FirstOrDefaultAsync(predicate);    }}