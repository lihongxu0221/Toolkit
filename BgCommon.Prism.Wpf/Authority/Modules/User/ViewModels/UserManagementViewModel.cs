using BgCommon.Collections;using BgCommon.Prism.Wpf.Authority.Entities;using BgCommon.Prism.Wpf.Authority.Models;using BgCommon.Prism.Wpf.Authority.Modules.User.Views;using BgCommon.Prism.Wpf.Authority.Services;using BgCommon.Prism.Wpf.MVVM;namespace BgCommon.Prism.Wpf.Authority.Modules.User.ViewModels;/// <summary>/// 用户管理./// </summary>public partial class UserManagementViewModel : NavigationViewModelBase{    private readonly IAuthorityService authorityService;    /// <summary>    /// 用户列表.    /// </summary>    [ObservableProperty]    private ObservableRangeCollection<UserInfo> users = new();    /// <summary>    /// 选中的用户.    /// </summary>    [ObservableProperty]    [NotifyPropertyChangedFor(nameof(IsUserSelected))]    private UserInfo? selectedUser;    public bool IsUserSelected => SelectedUser != null;    public UserManagementViewModel(IContainerExtension container)        : base(container)    {        this.authorityService = container.Resolve<IAuthorityService>();    }    /// <inheritdoc/>    public override async void OnNavigatedTo(NavigationContext navigationContext)    {        base.OnNavigatedTo(navigationContext);        await LoadUsersAsync();    }    private async Task LoadUsersAsync()    {        AuthorityResult<List<UserInfo>> response = await this.authorityService.GetAllUsersAsync();        if (response.Success)        {            return;        }        _ = Application.Current.Dispatcher.InvokeAsync(() =>        {            Users.ReplaceRange(userList);        });    }    /// <summary>    /// 刷新.    /// </summary>    [RelayCommand]    private async Task OnRefresh()    {        await this.LoadUsersAsync();    }    /// <summary>    /// 添加或修改用户.    /// </summary>    [RelayCommand]    private async Task AddOrUpdateUser(bool isCreateNew)    {        UserInfo? user = null;        string editModel = string.Empty;        if (isCreateNew)        {            editModel = UserInfoViewModel.EditModeNew;            user = new UserInfo            {                UserName = string.Empty,                Password = string.Empty, // 重要：密码应该被哈希加密存储！                IsActive = true,                CreatedAt = DateTime.Now            };        }        else        {            if (SelectedUser == null)            {                _ = await this.WarnAsync(GetString("请先选中要删除的用户"));                return;            }            editModel = UserInfoViewModel.EditModeUpdate;            user = new UserInfo(SelectedUser);        }        IDialogResult? dialogResult = await this.ShowDialogAsync(nameof(UserInfoView), keys =>        {            keys.Add(UserInfoViewModel.EditMode, editModel);            keys.Add(UserInfoViewModel.EditUser, user);        });        if (dialogResult != null && dialogResult.Result == ButtonResult.OK)        {            if (dialogResult.Parameters.TryGetValue(Constraints.Result, out UserInfo? userNew) && userNew != null)            {                bool result = false;                if (isCreateNew)                {                    result = await this.authorityService.RegisterAsync(userNew.UserName, userNew.Password, userNew.Authority);                    if (result)                    {                        Users.Add(userNew);                        SelectedUser = userNew;                    }                }                else                {                    result = await this.authorityService.UpdateUserInfoAsync(userNew);                }            }        }    }    /// <summary>    /// 删除用户.    /// </summary>    [RelayCommand]    private async Task DeleteUser()    {        if (SelectedUser == null)        {            _ = await this.WarnAsync(GetString("请先选中要删除的用户"));            return;        }        string selectUserName = SelectedUser.UserName;        IDialogResult? dialogResult = await this.QuestionAsync(GetString("确定要删除用户 {0} 吗？", selectUserName));        if (dialogResult != null && dialogResult.Result == ButtonResult.OK)        {            bool result = await this.authorityService.DeleteUserAsync(this.SelectedUser.Id);            if (result)            {                if (Users.Remove(SelectedUser))                {                    _ = await this.InfoAsync(GetString("用户{0}已删除", selectUserName));                    SelectedUser = null;                }            }        }    }}