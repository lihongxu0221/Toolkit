using BgCommon.MVVM;namespace BgControls.Controls;/// <summary>/// RegionManagerAwareBehavior.cs<br/>/// 1.RegionName，用于支持Popup弹窗,自动设置和更新DialogWindow的Region<br/>/// 1.DialogAttach，用于支持Dialog弹窗,自动设置和更新DialogWindow的Region<br/>/// </summary>public static class RegionManagerBehavior{    public static readonly DependencyProperty RegionNameProperty =        DependencyProperty.RegisterAttached("RegionName", typeof(string), typeof(RegionManagerBehavior), new PropertyMetadata(null, OnRegionNameChanged));    public static readonly DependencyProperty DialogAttachProperty =       DependencyProperty.RegisterAttached("DialogAttach", typeof(bool), typeof(RegionManagerBehavior), new PropertyMetadata(false, OnAttachPropertyChanged));    public static readonly DependencyProperty AttachCompletedCommandProperty =        DependencyProperty.RegisterAttached("AttachCompletedCommand", typeof(ICommand), typeof(RegionManagerBehavior), null);    public static readonly DependencyProperty AttachCompletedCommandParameterProperty =        DependencyProperty.RegisterAttached("AttachCompletedCommandParameter", typeof(object), typeof(RegionManagerBehavior), null);    public static void SetDialogAttach(DependencyObject dp, bool value)    {        dp.SetValue(DialogAttachProperty, value);    }    public static bool GetDialogAttach(DependencyObject dp)    {        return (bool)dp.GetValue(DialogAttachProperty);    }    public static void SetAttachCompletedCommand(DependencyObject element, ICommand value) => element.SetValue(AttachCompletedCommandProperty, value);    public static ICommand GetAttachCompletedCommand(DependencyObject element) => (ICommand)element.GetValue(AttachCompletedCommandProperty);    public static void SetAttachCompletedCommandParameter(DependencyObject element, object value) => element.SetValue(AttachCompletedCommandParameterProperty, value);    public static object GetAttachCompletedCommandParameter(DependencyObject element) => (object)element.GetValue(AttachCompletedCommandParameterProperty);    public static string GetRegionName(DependencyObject obj)    {        return (string)obj.GetValue(RegionNameProperty);    }    public static void SetRegionName(DependencyObject obj, string value)    {        obj.SetValue(RegionNameProperty, value);    }    private static void OnRegionNameChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)    {        if (d is Popup popup)        {            popup.Opened += (s, args) =>            {                if (popup.Child is FrameworkElement child && child != null)                {                    string regionName = GetRegionName(popup);                    IRegionManager? manager = RegionManager.GetRegionManager(popup);                    if (manager != null)                    {                        if (!manager.Regions.ContainsRegionWithName(regionName))                        {                            RegionManager.SetRegionName(child, regionName);                            RegionManager.SetRegionManager(child, manager);                            RegionManager.UpdateRegions();                        }                    }                }            };        }    }    private static void OnAttachPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)    {        if (d is FrameworkElement owner)        {            if ((bool)e.NewValue)            {                owner.Loaded += UserControl_Loaded;            }            else            {                owner.Loaded -= UserControl_Loaded;            }        }    }    private static void UserControl_Loaded(object sender, RoutedEventArgs e)    {        if (sender is FrameworkElement owner)        {            // 立即取消订阅，防止重入            owner.Loaded -= UserControl_Loaded;            // 在 UserControl_Loaded 中            // 找到宿主窗口            var window = Window.GetWindow(owner);            if (window != null)            {                // 获取附加到该窗口的作用域 RegionManager                IRegionManager? regionManager = RegionManager.GetRegionManager(window);                if (regionManager != null)                {                    RegionManager.SetRegionManager(owner, regionManager);                    // 注意：UpdateRegions()有风险，需要谨慎评估是否真的需要它。                    RegionManager.UpdateRegions();                }            }        }    }}