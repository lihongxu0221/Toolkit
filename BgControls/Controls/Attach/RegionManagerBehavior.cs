namespace BgControls.Controls;/// <summary>/// RegionManagerAwareBehavior.cs<br/>/// 1.RegionName：为 Popup 提供区域支持.由于Popup的特殊性，需要直接在其上指定RegionName.<br/>/// 2.DialogAttach：为普通对话框/FrameworkElement提供区域支持.<br/>/// 优化版：修复了内存泄漏，增强了健壮性，并增加了自动清理功能.<br/>/// </summary>public static class RegionManagerBehavior{    public static readonly DependencyProperty RegionNameProperty =        DependencyProperty.RegisterAttached("RegionName", typeof(string), typeof(RegionManagerBehavior), new PropertyMetadata(null, OnRegionNameChanged));    public static readonly DependencyProperty DialogAttachProperty =       DependencyProperty.RegisterAttached("DialogAttach", typeof(bool), typeof(RegionManagerBehavior), new PropertyMetadata(false, OnAttachPropertyChanged));    public static readonly DependencyProperty AttachCompletedCommandProperty =        DependencyProperty.RegisterAttached("AttachCompletedCommand", typeof(ICommand), typeof(RegionManagerBehavior), null);    public static readonly DependencyProperty AttachCompletedCommandParameterProperty =        DependencyProperty.RegisterAttached("AttachCompletedCommandParameter", typeof(object), typeof(RegionManagerBehavior), null);    public static void SetDialogAttach(DependencyObject dp, bool value)    {        dp.SetValue(DialogAttachProperty, value);    }    public static bool GetDialogAttach(DependencyObject dp)    {        return (bool)dp.GetValue(DialogAttachProperty);    }    public static void SetAttachCompletedCommand(DependencyObject element, ICommand value) => element.SetValue(AttachCompletedCommandProperty, value);    public static ICommand GetAttachCompletedCommand(DependencyObject element) => (ICommand)element.GetValue(AttachCompletedCommandProperty);    public static void SetAttachCompletedCommandParameter(DependencyObject element, object value) => element.SetValue(AttachCompletedCommandParameterProperty, value);    public static object GetAttachCompletedCommandParameter(DependencyObject element) => (object)element.GetValue(AttachCompletedCommandParameterProperty);    public static string GetRegionName(DependencyObject obj)    {        return (string)obj.GetValue(RegionNameProperty);    }    public static void SetRegionName(DependencyObject obj, string value)    {        obj.SetValue(RegionNameProperty, value);    }    private static void OnRegionNameChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)    {        if (d is Popup popup)        {            popup.Loaded -= OnPopupLoaded;            if (e.NewValue is string regionName && !string.IsNullOrEmpty(regionName))            {                popup.Loaded += OnPopupLoaded;            }        }    }    private static void OnAttachPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)    {        if (d is FrameworkElement owner)        {            owner.Loaded -= OnFrameworkElementLoaded;            if ((bool)e.NewValue)            {                owner.Loaded += OnFrameworkElementLoaded;            }        }    }    private static void OnPopupLoaded(object sender, RoutedEventArgs e)    {        if (sender is Popup popup)        {            // 立即移除，防止内存泄漏            popup.Loaded -= OnPopupLoaded;            if (popup.Child is not FrameworkElement child)            {                return;            }            string regionName = GetRegionName(popup);            if (string.IsNullOrEmpty(regionName))            {                return;            }            // 关键优化 2: 使用最可靠的方式查找 RegionManager            Window? window = Window.GetWindow(popup) ?? Application.Current?.MainWindow;            if (window == null)            {                return;            }            IRegionManager? scopedRegionManager = RegionManager.GetRegionManager(window);            if (scopedRegionManager == null)            {                return;            }            // 检查区域是否已存在            if (!scopedRegionManager.Regions.ContainsRegionWithName(regionName))            {                RegionManager.SetRegionName(child, regionName);                RegionManager.SetRegionManager(child, scopedRegionManager);                // RegionManager.UpdateRegions();            }            ExecuteAttachCompletedCommand(popup);            // 增加自动清理功能            popup.Unloaded += OnPopupUnloaded;        }    }    private static void OnPopupUnloaded(object sender, RoutedEventArgs e)    {        var popup = (Popup)sender;        popup.Unloaded -= OnPopupUnloaded; // 清理自身        string regionName = GetRegionName(popup);        if (string.IsNullOrEmpty(regionName))        {            return;        }        Window? window = Window.GetWindow(popup) ?? Application.Current?.MainWindow;        if (window == null)        {            return;        }        IRegionManager? scopedRegionManager = RegionManager.GetRegionManager(window);        if (scopedRegionManager != null && scopedRegionManager.Regions.ContainsRegionWithName(regionName))        {            _ = scopedRegionManager.Regions.Remove(regionName);        }    }    private static void OnFrameworkElementLoaded(object sender, RoutedEventArgs e)    {        if (sender is FrameworkElement owner)        {            // 立即取消订阅，防止重入            owner.Loaded -= OnFrameworkElementLoaded;            // 找到宿主窗口            Window? window = Window.GetWindow(owner);            if (window == null)            {                return;            }            IRegionManager? scopedRegionManager = RegionManager.GetRegionManager(window);            if (scopedRegionManager == null)            {                return;            }            // 对于普通对话框，区域管理器已经通过作用域传递，我们只需确保它被正确应用            RegionManager.SetRegionManager(owner, scopedRegionManager);            // 注意：UpdateRegions()有风险，需要谨慎评估是否真的需要它.            // RegionManager.UpdateRegions();            ExecuteAttachCompletedCommand(owner);        }    }    private static void ExecuteAttachCompletedCommand(FrameworkElement element)    {        ICommand command = GetAttachCompletedCommand(element);        object commandParameter = GetAttachCompletedCommandParameter(element);        if (command != null && command.CanExecute(commandParameter))        {            command.Execute(commandParameter);        }    }}