<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:bg="http://www.sz-baigu.com/"
                    xmlns:local="clr-namespace:BgControls.Controls"
                    xmlns:cvt="clr-namespace:BgControls.Tools.Converter">

    <cvt:CornerRadiusConverter x:Key="CornerRadiusConverter" />

    <!-- 默认 (黑/灰) -->
    <RadialGradientBrush x:Key="DefaultNormal" GradientOrigin="0.5,0.2">
        <GradientStop Color="#FF4D4D4D" Offset="0.0" />
        <GradientStop Color="#FF1C1C1C" Offset="1.0" />
    </RadialGradientBrush>
    <RadialGradientBrush x:Key="DefaultMouseOver" GradientOrigin="0.5,0.2">
        <GradientStop Color="#FF6B6B6B" Offset="0.0" />
        <GradientStop Color="#FF333333" Offset="1.0" />
    </RadialGradientBrush>
    <RadialGradientBrush x:Key="DefaultPressed" GradientOrigin="0.5,0.2">
        <GradientStop Color="#FF3C3C3C" Offset="0.0" />
        <GradientStop Color="#FF0A0A0A" Offset="1.0" />
    </RadialGradientBrush>

    <!-- 禁用状态 -->
    <LinearGradientBrush x:Key="DisabledBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Color="#FF888888" Offset="0.0" />
        <GradientStop Color="#FF666666" Offset="1.0" />
    </LinearGradientBrush>

    <RadialGradientBrush x:Key="SuccessNormal" GradientOrigin="0.5,0.2">
        <GradientStop Color="#FF00C800" Offset="0.0" />
        <GradientStop Color="#FF007D00" Offset="1.0" />
    </RadialGradientBrush>
    <RadialGradientBrush x:Key="SuccessPressed" GradientOrigin="0.5,0.2">
        <GradientStop Color="#FF32FF32" Offset="0.0" />
        <GradientStop Color="#FF00A500" Offset="1.0" />
    </RadialGradientBrush>
    <RadialGradientBrush x:Key="SuccessMouseOver" GradientOrigin="0.5,0.2">
        <GradientStop Color="#FF78FF78" Offset="0.0" />
        <GradientStop Color="#FF1FC21F" Offset="1.0" />
    </RadialGradientBrush>

    <RadialGradientBrush x:Key="ErrorNormal" GradientOrigin="0.5,0.2">
        <GradientStop Color="#FFD30000" Offset="0.0" />
        <GradientStop Color="#FFA00000" Offset="1.0" />
    </RadialGradientBrush>
    <RadialGradientBrush x:Key="ErrorPressed" GradientOrigin="0.5,0.2">
        <GradientStop Color="#FFFF2E2E" Offset="0.0" />
        <GradientStop Color="#FFD30000" Offset="1.0" />
    </RadialGradientBrush>
    <RadialGradientBrush x:Key="ErrorMouseOver" GradientOrigin="0.5,0.2">
        <GradientStop Color="#FFFF5C5C" Offset="0.0" />
        <GradientStop Color="#FFEA2424" Offset="1.0" />
    </RadialGradientBrush>

    <RadialGradientBrush x:Key="WarningNormal" GradientOrigin="0.5,0.2">
        <GradientStop Color="#FFEAB600" Offset="0.0" />
        <GradientStop Color="#FFBF8300" Offset="1.0" />
    </RadialGradientBrush>
    <RadialGradientBrush x:Key="WarningPressed" GradientOrigin="0.5,0.2">
        <GradientStop Color="#FFFFD100" Offset="0.0" />
        <GradientStop Color="#FFD49A00" Offset="1.0" />
    </RadialGradientBrush>
    <RadialGradientBrush x:Key="WarningMouseOver" GradientOrigin="0.5,0.2">
        <GradientStop Color="#FFFFE04D" Offset="0.0" />
        <GradientStop Color="#FFE8B21F" Offset="1.0" />
    </RadialGradientBrush>

    <Style x:Key="ButtonStyle.GlossyCircular" TargetType="Button">
        <Setter Property="Width" Value="120"/>
        <Setter Property="Height" Value="120"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="FontSize" Value="28"/>
        <Setter Property="FontFamily" Value="Microsoft YaHei UI"/>
        <Setter Property="Background" Value="{StaticResource DefaultNormal}"/>
        <Setter Property="local:BackgroundSwitchElement.MouseDownBackground" Value="{StaticResource DefaultPressed}"/>
        <Setter Property="local:BackgroundSwitchElement.MouseHoverBackground" Value="{StaticResource DefaultMouseOver}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid x:Name="RootGrid">
                        <!-- 金属边框 (不变) -->
                        <Ellipse x:Name="OuterBezel">
                            <Ellipse.Fill>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                    <GradientStop Color="#FFF0F0F0" Offset="0.0"/>
                                    <GradientStop Color="#FFAEAEAE" Offset="1.0"/>
                                </LinearGradientBrush>
                            </Ellipse.Fill>
                        </Ellipse>
                        <Ellipse Margin="4" StrokeThickness="3">
                            <Ellipse.Stroke>
                                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                    <GradientStop Color="#B2FFFFFF" Offset="0.0" />
                                    <GradientStop Color="#33FFFFFF" Offset="0.5" />
                                    <GradientStop Color="#33000000" Offset="0.51" />
                                    <GradientStop Color="#80000000" Offset="1.0" />
                                </LinearGradientBrush>
                            </Ellipse.Stroke>
                        </Ellipse>
                        <Ellipse Margin="7" Stroke="#4C000000" StrokeThickness="1" />

                        <!-- 按钮主体: Fill 绑定到按钮的 Background 属性 -->
                        <Ellipse x:Name="ButtonBody" Margin="8" Fill="{TemplateBinding Background}"/>

                        <!-- 高光 (不变) -->
                        <Ellipse x:Name="Highlight" Margin="13,13,13,55" >
                            <Ellipse.Fill>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                    <GradientStop Color="#80FFFFFF" Offset="0.0" />
                                    <GradientStop Color="#00FFFFFF" Offset="1.0" />
                                </LinearGradientBrush>
                            </Ellipse.Fill>
                        </Ellipse>

                        <!-- 内容 (不变) -->
                        <ContentPresenter x:Name="Content" HorizontalAlignment="Center" VerticalAlignment="Center">
                            <ContentPresenter.Effect>
                                <DropShadowEffect ShadowDepth="1" BlurRadius="2" Color="Black" Opacity="0.4"/>
                            </ContentPresenter.Effect>
                        </ContentPresenter>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!-- 禁用状态 -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="ButtonBody" Property="Fill" Value="{StaticResource DisabledBrush}"/>
                            <Setter TargetName="RootGrid" Property="Opacity" Value="0.6"/>
                        </Trigger>
                        <!-- 悬停状态 -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ButtonBody" Property="Fill">
                                <Setter.Value>
                                    <PriorityBinding>
                                        <!-- 优先尝试绑定到附加属性 -->
                                        <Binding Path="(local:BackgroundSwitchElement.MouseHoverBackground)" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <!-- 如果上面失败，则回退到绑定按钮自身的 Background -->
                                        <Binding Path="Background" RelativeSource="{RelativeSource TemplatedParent}" />
                                    </PriorityBinding>
                                </Setter.Value>
                            </Setter>
                        </Trigger>

                        <!-- 按下状态 -->
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="ButtonBody" Property="Fill">
                                <Setter.Value>
                                    <PriorityBinding>
                                        <!-- 优先尝试绑定到附加属性 -->
                                        <Binding Path="(local:BackgroundSwitchElement.MouseDownBackground)" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <!-- 如果上面失败，则回退到绑定按钮自身的 Background -->
                                        <Binding Path="Background" RelativeSource="{RelativeSource TemplatedParent}" />
                                    </PriorityBinding>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="Highlight" Property="Opacity" Value="0.6"/>
                            <Setter TargetName="Content" Property="RenderTransform">
                                <Setter.Value>
                                    <TranslateTransform Y="1"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Button.GeometryIcon" TargetType="Button" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="local:BorderElement.CornerRadius" Value="0" />
        <Setter Property="Height" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="Padding" Value="{StaticResource DefaultControlPadding}" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border CornerRadius="{Binding Path=(local:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                            Background="{TemplateBinding Background}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}">
                        <ContentControl Margin="{TemplateBinding Padding}"
                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <Path Width="{TemplateBinding local:IconElement.Width}"
                                  Height="{TemplateBinding local:IconElement.Height}"
                                  Fill="{TemplateBinding Foreground}"
                                  SnapsToDevicePixels="True"
                                  Stretch="Uniform"
                                  Data="{TemplateBinding local:IconElement.Geometry}" />
                        </ContentControl>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="UIElement.Opacity" Value=".9" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="UIElement.Opacity" Value=".6" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Button.FontIcon1" TargetType="{x:Type Button}">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Height" Value="40" />
        <Setter Property="BorderBrush" Value="DarkSlateBlue" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="{DynamicResource RegionLinearBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="local:BorderElement.CornerRadius" Value="{DynamicResource DefaultCornerRadius}" />
        <Setter Property="local:IconElement.FontIcon" Value="&#xe98f;" />
        <Setter Property="local:IconElement.FontSize" Value="{DynamicResource HeadFontSize}" />
        <Setter Property="local:IconElement.Margin" Value="0 0 10 0" />
        <Setter Property="Padding" Value="15,5" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <local:SimplePanel>
                        <Border Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(local:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
                        <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{Binding Path=(local:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                            <StackPanel Margin="{TemplateBinding Padding}"
                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                        Orientation="Horizontal">
                                <TextBlock Name="PathMain"
                                           Width="{Binding Path=(local:IconElement.Width), RelativeSource={RelativeSource TemplatedParent}}"
                                           Height="{Binding Path=(local:IconElement.Height), RelativeSource={RelativeSource TemplatedParent}}"
                                           Margin="{Binding Path=(local:IconElement.Margin), RelativeSource={RelativeSource TemplatedParent}}"
                                           VerticalAlignment="Center"
                                           Style="{DynamicResource TextBlock.IconFont}"
                                           Text="{Binding Path=(local:IconElement.FontIcon), RelativeSource={RelativeSource TemplatedParent}}"
                                           FontSize="{Binding Path=(local:IconElement.FontSize), RelativeSource={RelativeSource TemplatedParent}}"
                                           Foreground="{TemplateBinding Foreground}" />
                                <ContentPresenter Name="ContentPresenterMain"
                                                  Margin="{TemplateBinding Padding}"
                                                  VerticalAlignment="Center"
                                                  RecognizesAccessKey="True"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </StackPanel>
                        </Border>
                    </local:SimplePanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Content" Value="{x:Null}">
                            <Setter TargetName="ContentPresenterMain" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="local:IconElement.FontIcon" Value="{x:Null}">
                            <Setter TargetName="PathMain" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="ContentPresenterMain" Property="Margin" Value="0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="UIElement.Opacity" Value=".9" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="UIElement.Opacity" Value=".6" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Button 字体图标+文本，单文本，单图标 -->
    <Style x:Key="Button.FontIcon" TargetType="Button" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Height" Value="40" />
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="local:BorderElement.CornerRadius" Value="{DynamicResource DefaultCornerRadius}" />
        <Setter Property="local:IconElement.FontIcon" Value="{x:Null}" />
        <Setter Property="local:IconElement.FontSize" Value="{DynamicResource HeadFontSize}" />
        <Setter Property="local:IconElement.DisplayStyle" Value="ImageAndText" />
        <Setter Property="local:IconElement.TextImageRelation" Value="ImageBeforeText" />
        <Setter Property="local:IconElement.Margin" Value="5 5 0 5" />
        <Setter Property="Padding" Value="10,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="menuButton" 
                            Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            CornerRadius="{Binding Path=(local:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <Grid Margin="{TemplateBinding Padding}" >
                            <Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition x:Name="Column0" Width="Auto" />
                                    <ColumnDefinition x:Name="Column1" Width="*" />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition x:Name="Row0" Height="*" />
                                    <RowDefinition x:Name="Row1" Height="Auto" />
                                </Grid.RowDefinitions>
                                <Grid x:Name="Grid_Icon" Grid.Row="0" Grid.Column="0" Margin="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                    <TextBlock Width="{Binding Path=(local:IconElement.Width), RelativeSource={RelativeSource TemplatedParent}}"
                                               Height="{Binding Path=(local:IconElement.Height), RelativeSource={RelativeSource TemplatedParent}}"
                                               Margin="{Binding Path=(local:IconElement.Margin), RelativeSource={RelativeSource TemplatedParent}}"
                                               HorizontalAlignment="Center" VerticalAlignment="Center"
                                               FontFamily="{DynamicResource IconFont}"
                                               Text="{Binding Path=(local:IconElement.FontIcon), RelativeSource={RelativeSource TemplatedParent}}"
                                               FontSize="{Binding Path=(local:IconElement.FontSize), RelativeSource={RelativeSource TemplatedParent}}"
                                               Foreground="{TemplateBinding Foreground}" />
                                </Grid>
                                <ContentPresenter x:Name="Part_Content" Grid.Row="0" Grid.Column="1" Margin="0,5,0,5" ContentSource="Content" HorizontalAlignment="Left" VerticalAlignment="Center" />
                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="RadioButton.Background" Value="{DynamicResource SecondaryRegionBrush}" />
                            <Setter Property="RadioButton.Opacity" Value="0.8" />
                        </Trigger>

                        <!-- 单文字，不显示图标 -->
                        <Trigger Property="local:IconElement.DisplayStyle" Value="Text">
                            <Setter TargetName="Grid_Icon" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Part_Content" Property="Visibility" Value="Visible" />
                            <Setter TargetName="Part_Content" Property="Margin" Value="{Binding Path=Padding,RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>

                        <!-- 单图标，不显示文字 -->
                        <Trigger Property="local:IconElement.DisplayStyle" Value="Image">
                            <Setter TargetName="Grid_Icon" Property="Visibility" Value="Visible" />
                            <Setter TargetName="Part_Content" Property="Visibility" Value="Collapsed" />
                            <Setter Property="HorizontalContentAlignment" Value="Center" />
                        </Trigger>

                        <!-- 图标+文字，图标在文字前面 -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="local:IconElement.DisplayStyle" Value="ImageAndText" />
                                <Condition Property="local:IconElement.TextImageRelation" Value="ImageBeforeText" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Column0" Property="Width" Value="Auto" />
                            <Setter TargetName="Column1" Property="Width" Value="*" />
                            <Setter TargetName="Row0" Property="Height" Value="*" />
                            <Setter TargetName="Row1" Property="Height" Value="Auto" />
                            <Setter TargetName="Grid_Icon" Property="Grid.Column" Value="0" />
                            <Setter TargetName="Grid_Icon" Property="Grid.Row" Value="0" />
                            <Setter TargetName="Part_Content" Property="Grid.Column" Value="1" />
                            <Setter TargetName="Part_Content" Property="Grid.Row" Value="0" />
                            <Setter TargetName="Part_Content" Property="Margin" Value="5,0,0,0" />
                            <Setter TargetName="Part_Content" Property="HorizontalAlignment" Value="Left" />
                            <Setter Property="local:IconElement.Margin" Value="5,5,0,5" />
                        </MultiTrigger>

                        <!-- 图标+文字，文字在图标前面 -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="local:IconElement.DisplayStyle" Value="ImageAndText" />
                                <Condition Property="local:IconElement.TextImageRelation" Value="TextBeforeImage" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Column0" Property="Width" Value="*" />
                            <Setter TargetName="Column1" Property="Width" Value="Auto" />
                            <Setter TargetName="Row0" Property="Height" Value="*" />
                            <Setter TargetName="Row1" Property="Height" Value="Auto" />
                            <Setter TargetName="Grid_Icon" Property="Grid.Column" Value="1" />
                            <Setter TargetName="Grid_Icon" Property="Grid.Row" Value="0" />
                            <Setter TargetName="Part_Content" Property="Grid.Column" Value="0" />
                            <Setter TargetName="Part_Content" Property="Grid.Row" Value="0" />
                            <Setter TargetName="Part_Content" Property="Margin" Value="5,0,0,0" />
                            <Setter TargetName="Part_Content" Property="HorizontalAlignment" Value="Left" />
                            <Setter Property="local:IconElement.Margin" Value="5,5,0,5" />
                        </MultiTrigger>

                        <!-- 图标+文字，图标在文字上面 -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="local:IconElement.DisplayStyle" Value="ImageAndText" />
                                <Condition Property="local:IconElement.TextImageRelation" Value="ImageAboveText" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Column0" Property="Width" Value="*" />
                            <Setter TargetName="Column1" Property="Width" Value="Auto" />
                            <Setter TargetName="Row0" Property="Height" Value="*" />
                            <Setter TargetName="Row1" Property="Height" Value="Auto" />
                            <Setter TargetName="Grid_Icon" Property="Grid.Column" Value="0" />
                            <Setter TargetName="Grid_Icon" Property="Grid.Row" Value="0" />
                            <Setter TargetName="Part_Content" Property="Grid.Column" Value="0" />
                            <Setter TargetName="Part_Content" Property="Grid.Row" Value="1" />
                            <Setter TargetName="Part_Content" Property="Margin" Value="0,5,0,0" />
                            <Setter TargetName="Part_Content" Property="HorizontalAlignment" Value="Center" />
                            <Setter Property="local:IconElement.Margin" Value="0,5,0,5" />
                            <Setter Property="HorizontalContentAlignment" Value="Center" />
                        </MultiTrigger>

                        <!-- 图标+文字，文字在图标上 -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="local:IconElement.DisplayStyle" Value="ImageAndText" />
                                <Condition Property="local:IconElement.TextImageRelation" Value="TextAboveImage" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Column0" Property="Width" Value="*" />
                            <Setter TargetName="Column1" Property="Width" Value="Auto" />
                            <Setter TargetName="Row0" Property="Height" Value="Auto" />
                            <Setter TargetName="Row1" Property="Height" Value="*" />
                            <Setter TargetName="Grid_Icon" Property="Grid.Column" Value="0" />
                            <Setter TargetName="Grid_Icon" Property="Grid.Row" Value="1" />
                            <Setter Property="local:IconElement.Margin" Value="0,5,0,5" />
                            <Setter TargetName="Part_Content" Property="Grid.Column" Value="0" />
                            <Setter TargetName="Part_Content" Property="Grid.Row" Value="0" />
                            <Setter TargetName="Part_Content" Property="Margin" Value="0,5,0,0" />
                            <Setter TargetName="Part_Content" Property="HorizontalAlignment" Value="Center" />
                            <Setter Property="HorizontalContentAlignment" Value="Center" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <!-- 仅显示文字 -->
            <Trigger Property="local:IconElement.DisplayStyle" Value="Text">
                <Setter Property="FontSize" Value="{DynamicResource SubHeadFontSize}" />
            </Trigger>
            <!-- 显示图片和文字，且图片在文字之之前 -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="local:IconElement.DisplayStyle" Value="ImageAndText" />
                    <Condition Property="local:IconElement.TextImageRelation" Value="ImageBeforeText" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="FontSize" Value="{DynamicResource SubHeadFontSize}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
            <!-- 显示图片和文字，且图片在文字之后 -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="local:IconElement.DisplayStyle" Value="ImageAndText" />
                    <Condition Property="local:IconElement.TextImageRelation" Value="TextBeforeImage" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="FontSize" Value="{DynamicResource SubHeadFontSize}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
            <!-- 仅显示图片 -->
            <Trigger Property="local:IconElement.DisplayStyle" Value="Image">
            </Trigger>
            <!-- 显示图片和文字，且图片在文字之上 -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="local:IconElement.DisplayStyle" Value="ImageAndText" />
                    <Condition Property="local:IconElement.TextImageRelation" Value="ImageAboveText" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="FontSize" Value="{DynamicResource HeadFontSize}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
            <!-- 显示图片和文字，且图片在文字之下 -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="local:IconElement.DisplayStyle" Value="ImageAndText" />
                    <Condition Property="local:IconElement.TextImageRelation" Value="TextAboveImage" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="FontSize" Value="{DynamicResource HeadFontSize}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!-- Button 图标+文本，单文本，单图标 -->
    <Style x:Key="Button.Image1" TargetType="Button" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Height" Value="40" />
        <Setter Property="BorderBrush" Value="DarkSlateBlue" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="{DynamicResource RegionLinearBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="local:BorderElement.CornerRadius" Value="{DynamicResource DefaultCornerRadius}" />
        <Setter Property="local:IconElement.Image" Value="{x:Null}" />
        <Setter Property="local:IconElement.ImageSelected" Value="{x:Null}" />
        <Setter Property="local:IconElement.Stretch" Value="Uniform" />
        <Setter Property="local:IconElement.Width" Value="32" />
        <Setter Property="local:IconElement.Height" Value="32" />
        <Setter Property="local:IconElement.DisplayStyle" Value="ImageAndText" />
        <Setter Property="local:IconElement.TextImageRelation" Value="ImageBeforeText" />
        <Setter Property="local:IconElement.ShowSelectedLine" Value="True" />
        <Setter Property="local:IconElement.Margin" Value="10 5 0 5" />
        <Setter Property="Padding" Value="15,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}"
                            CornerRadius="{Binding Path=(local:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <Grid Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid x:Name="Horizontal" Visibility="Visible">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition x:Name="Column0" Width="Auto" />
                                    <ColumnDefinition x:Name="Column1" Width="*" />
                                </Grid.ColumnDefinitions>
                                <Image x:Name="Horizontal_Icon"
                                       Grid.Column="0"
                                       Width="{Binding Path=(local:IconElement.Width), RelativeSource={RelativeSource TemplatedParent}}"
                                       Height="{Binding Path=(local:IconElement.Height), RelativeSource={RelativeSource TemplatedParent}}"
                                       Margin="{Binding Path=(local:IconElement.Margin), RelativeSource={RelativeSource TemplatedParent}}"
                                       HorizontalAlignment="Center"
                                       VerticalAlignment="Center"
                                       Source="{Binding Path=(local:IconElement.Image), RelativeSource={RelativeSource TemplatedParent}}"
                                       Stretch="{Binding Path=(local:IconElement.Stretch), RelativeSource={RelativeSource TemplatedParent}}" />
                                <Image x:Name="Horizontal_Icon_Selected"
                                       Grid.Column="0"
                                       Width="{Binding Path=(local:IconElement.Width), RelativeSource={RelativeSource TemplatedParent}}"
                                       Height="{Binding Path=(local:IconElement.Height), RelativeSource={RelativeSource TemplatedParent}}"
                                       Margin="{Binding Path=(local:IconElement.Margin), RelativeSource={RelativeSource TemplatedParent}}"
                                       HorizontalAlignment="Center"
                                       VerticalAlignment="Center"
                                       Visibility="Collapsed"
                                       Source="{Binding Path=(local:IconElement.ImageSelected), RelativeSource={RelativeSource TemplatedParent}}"
                                       Stretch="{Binding Path=(local:IconElement.Stretch), RelativeSource={RelativeSource TemplatedParent}}" />
                                <ContentPresenter x:Name="Horizontal_Part_Content"
                                                  Grid.Column="1"
                                                  Margin="5,0,0,0"
                                                  HorizontalAlignment="Left"
                                                  VerticalAlignment="Center"
                                                  Content="{TemplateBinding Content}"
                                                  TextElement.Foreground="{TemplateBinding Foreground}"
                                                  TextElement.FontWeight="{TemplateBinding FontWeight}"
                                                  TextElement.FontSize="{TemplateBinding FontSize}" />
                            </Grid>
                            <Grid x:Name="Vertical" Visibility="Collapsed">
                                <Grid.RowDefinitions>
                                    <RowDefinition x:Name="Row0" Height="*" />
                                    <RowDefinition x:Name="Row1" Height="Auto" />
                                </Grid.RowDefinitions>
                                <Image x:Name="Vertical_Icon"
                                       Grid.Row="0"
                                       Width="{Binding Path=(local:IconElement.Width), RelativeSource={RelativeSource TemplatedParent}}"
                                       Height="{Binding Path=(local:IconElement.Height), RelativeSource={RelativeSource TemplatedParent}}"
                                       Margin="{Binding Path=(local:IconElement.Margin), RelativeSource={RelativeSource TemplatedParent}}"
                                       HorizontalAlignment="Center"
                                       VerticalAlignment="Center"
                                       Source="{Binding Path=(local:IconElement.Image), RelativeSource={RelativeSource TemplatedParent}}"
                                       Stretch="{Binding Path=(local:IconElement.Stretch), RelativeSource={RelativeSource TemplatedParent}}" />
                                <Image x:Name="Vertical_Icon_Selected"
                                       Grid.Row="0"
                                       Width="{Binding Path=(local:IconElement.Width), RelativeSource={RelativeSource TemplatedParent}}"
                                       Height="{Binding Path=(local:IconElement.Height), RelativeSource={RelativeSource TemplatedParent}}"
                                       Margin="{Binding Path=(local:IconElement.Margin), RelativeSource={RelativeSource TemplatedParent}}"
                                       HorizontalAlignment="Center"
                                       VerticalAlignment="Center"
                                       Visibility="Collapsed"
                                       Source="{Binding Path=(local:IconElement.ImageSelected), RelativeSource={RelativeSource TemplatedParent}}"
                                       Stretch="{Binding Path=(local:IconElement.Stretch), RelativeSource={RelativeSource TemplatedParent}}" />
                                <ContentPresenter x:Name="Vertical_Part_Content"
                                                  Grid.Row="1"
                                                  Margin="0,5,0,5"
                                                  HorizontalAlignment="Center"
                                                  VerticalAlignment="Center"
                                                  Content="{TemplateBinding Content}"
                                                  TextElement.Foreground="{TemplateBinding Foreground}"
                                                  TextElement.FontWeight="{TemplateBinding FontWeight}"
                                                  TextElement.FontSize="{TemplateBinding FontSize}" />
                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- 单文字，不显示图标 -->
                        <Trigger Property="local:IconElement.DisplayStyle" Value="Text">
                            <Setter TargetName="Horizontal" Property="Visibility" Value="Visible" />
                            <Setter TargetName="Vertical" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Horizontal_Icon" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Horizontal_Icon_Selected" Property="Visibility" Value="Collapsed" />
                        </Trigger>

                        <!-- 图标+文字，图标在文字前面 -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="local:IconElement.DisplayStyle" Value="ImageAndText" />
                                <Condition Property="local:IconElement.TextImageRelation" Value="ImageBeforeText" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Horizontal" Property="Visibility" Value="Visible" />
                            <Setter TargetName="Vertical" Property="Visibility" Value="Collapsed" />
                        </MultiTrigger>

                        <!-- 图标+文字，文字在图标前面 -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="local:IconElement.DisplayStyle" Value="ImageAndText" />
                                <Condition Property="local:IconElement.TextImageRelation" Value="TextBeforeImage" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Horizontal" Property="Visibility" Value="Visible" />
                            <Setter TargetName="Vertical" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Column0" Property="Width" Value="Auto" />
                            <Setter TargetName="Column1" Property="Width" Value="*" />
                            <Setter TargetName="Horizontal_Part_Content" Property="Grid.Column" Value="0" />
                            <Setter TargetName="Horizontal_Icon" Property="Grid.Column" Value="1" />
                            <Setter TargetName="Horizontal_Icon_Selected" Property="Grid.Column" Value="1" />
                            <Setter TargetName="Horizontal_Part_Content" Property="Margin" Value="5,0" />
                            <Setter TargetName="Horizontal_Icon" Property="Margin" Value="12,0,0,0" />
                            <Setter TargetName="Horizontal_Icon_Selected" Property="Margin" Value="12,0,0,0" />
                        </MultiTrigger>

                        <!-- 单图标，不显示文字 -->
                        <Trigger Property="local:IconElement.DisplayStyle" Value="Image">
                            <Setter TargetName="Horizontal" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Vertical" Property="Visibility" Value="Visible" />
                            <Setter TargetName="Vertical_Part_Content" Property="Visibility" Value="Collapsed" />
                        </Trigger>

                        <!-- 图标+文字，图标在文字上面 -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="local:IconElement.DisplayStyle" Value="ImageAndText" />
                                <Condition Property="local:IconElement.TextImageRelation" Value="ImageAboveText" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Horizontal" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Vertical" Property="Visibility" Value="Visible" />
                        </MultiTrigger>

                        <!-- 图标+文字，文字在图标上 -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="local:IconElement.DisplayStyle" Value="ImageAndText" />
                                <Condition Property="local:IconElement.TextImageRelation" Value="TextAboveImage" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Horizontal" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Vertical" Property="Visibility" Value="Visible" />
                            <Setter TargetName="Row0" Property="Height" Value="Auto" />
                            <Setter TargetName="Row1" Property="Height" Value="*" />
                            <Setter TargetName="Vertical_Part_Content" Property="Grid.Row" Value="0" />
                            <Setter TargetName="Vertical_Icon" Property="Grid.Row" Value="1" />
                            <Setter TargetName="Vertical_Icon_Selected" Property="Grid.Row" Value="1" />
                        </MultiTrigger>

                        <!-- RadioButton IsChecked 文字+图片 水平方向 -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Button.IsFocused" Value="True" />
                                <Condition Property="local:IconElement.DisplayStyle" Value="ImageAndText" />
                                <Condition SourceName="Horizontal" Property="Visibility" Value="Visible" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Horizontal_Icon" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Horizontal_Icon_Selected" Property="Visibility" Value="Visible" />
                        </MultiTrigger>

                        <!-- RadioButton IsChecked 文字+图片 垂直方向 -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Button.IsFocused" Value="True" />
                                <Condition Property="local:IconElement.DisplayStyle" Value="ImageAndText" />
                                <Condition SourceName="Vertical" Property="Visibility" Value="Visible" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Vertical_Icon" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Vertical_Icon_Selected" Property="Visibility" Value="Visible" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <!-- 仅显示文字 -->
            <Trigger Property="local:IconElement.DisplayStyle" Value="Text">
                <Setter Property="FontSize" Value="{DynamicResource SubHeadFontSize}" />
            </Trigger>
            <!-- 显示图片和文字，且图片在文字之之前 -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="local:IconElement.DisplayStyle" Value="ImageAndText" />
                    <Condition Property="local:IconElement.TextImageRelation" Value="ImageBeforeText" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="local:IconElement.Width" Value="32" />
                    <Setter Property="local:IconElement.Height" Value="32" />
                    <Setter Property="FontSize" Value="{DynamicResource SubHeadFontSize}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
            <!-- 显示图片和文字，且图片在文字之后 -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="local:IconElement.DisplayStyle" Value="ImageAndText" />
                    <Condition Property="local:IconElement.TextImageRelation" Value="TextBeforeImage" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="local:IconElement.Width" Value="32" />
                    <Setter Property="local:IconElement.Height" Value="32" />
                    <Setter Property="FontSize" Value="{DynamicResource SubHeadFontSize}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
            <!-- 仅显示图片 -->
            <Trigger Property="local:IconElement.DisplayStyle" Value="Image">
            </Trigger>
            <!-- 显示图片和文字，且图片在文字之上 -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="local:IconElement.DisplayStyle" Value="ImageAndText" />
                    <Condition Property="local:IconElement.TextImageRelation" Value="ImageAboveText" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="local:IconElement.Width" Value="50" />
                    <Setter Property="FontSize" Value="{DynamicResource TextFontSize}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
            <!-- 显示图片和文字，且图片在文字之下 -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="local:IconElement.DisplayStyle" Value="ImageAndText" />
                    <Condition Property="local:IconElement.TextImageRelation" Value="TextAboveImage" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="local:IconElement.Width" Value="50" />
                    <Setter Property="FontSize" Value="{DynamicResource TextFontSize}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="UIElement.Opacity" Value=".9" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="UIElement.Opacity" Value=".6" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Button 图标+文本，单文本，单图标 -->
    <Style x:Key="Button.Image" TargetType="Button" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="local:IconElement.Image" Value="{x:Null}" />
        <Setter Property="local:IconElement.ImageSelected" Value="{x:Null}" />
        <Setter Property="local:IconElement.Stretch" Value="Uniform" />
        <Setter Property="local:IconElement.Width" Value="32" />
        <Setter Property="local:IconElement.Height" Value="32" />
        <Setter Property="local:IconElement.DisplayStyle" Value="ImageAndText" />
        <Setter Property="local:IconElement.TextImageRelation" Value="TextBeforeImage" />
        <Setter Property="local:IconElement.ShowSelectedLine" Value="True" />
        <Setter Property="local:IconElement.RotateAngle" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Height" Value="48" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="menuButton" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
                            Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Border x:Name="btnSelected" Grid.RowSpan="2" CornerRadius="10" />
                            <Rectangle Name="Indicator" Grid.RowSpan="2" Width="3" Margin="0,0,0,0" 
                                       HorizontalAlignment="Right" VerticalAlignment="Stretch"
                                       Visibility="{TemplateBinding local:IconElement.ShowSelectedLine, Converter={StaticResource Boolean2VisibilityConverter}}">
                                <Rectangle.BitmapEffect>
                                    <DropShadowBitmapEffect ShadowDepth="3"
                                                            Direction="0"
                                                            Softness="0.6"
                                                            Color="{DynamicResource DarkPrimaryColor}" />
                                </Rectangle.BitmapEffect>
                            </Rectangle>
                            <Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition x:Name="Column0" Width="Auto" />
                                    <ColumnDefinition x:Name="Column1" Width="*" />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition x:Name="Row0" Height="*" />
                                    <RowDefinition x:Name="Row1" Height="Auto" />
                                </Grid.RowDefinitions>
                                <Grid x:Name="Grid_Icon" Grid.Row="0" Grid.Column="0" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center">
                                    <Image x:Name="Icon"
                                           Width="{Binding Path=(local:IconElement.Width), RelativeSource={RelativeSource TemplatedParent}}"
                                           Height="{Binding Path=(local:IconElement.Height), RelativeSource={RelativeSource TemplatedParent}}"
                                           Source="{Binding Path=(local:IconElement.Image), RelativeSource={RelativeSource TemplatedParent}}"
                                           Stretch="{Binding Path=(local:IconElement.Stretch), RelativeSource={RelativeSource TemplatedParent}}">
                                        <Image.RenderTransform>
                                            <RotateTransform Angle="{Binding Path=(local:IconElement.RotateAngle), RelativeSource={RelativeSource TemplatedParent}}" CenterX="0.5" CenterY="0.5"/>
                                        </Image.RenderTransform>
                                    </Image>
                                    <Image x:Name="Icon_Selected"
                                           Width="{Binding Path=(local:IconElement.Width), RelativeSource={RelativeSource TemplatedParent}}"
                                           Height="{Binding Path=(local:IconElement.Height), RelativeSource={RelativeSource TemplatedParent}}"
                                           Visibility="Collapsed"
                                           Source="{Binding Path=(local:IconElement.ImageSelected), RelativeSource={RelativeSource TemplatedParent}}"
                                           Stretch="{Binding Path=(local:IconElement.Stretch), RelativeSource={RelativeSource TemplatedParent}}">
                                        <Image.RenderTransform>
                                            <RotateTransform Angle="{Binding Path=(local:IconElement.RotateAngle), RelativeSource={RelativeSource TemplatedParent}}" CenterX="0.5" CenterY="0.5"/>
                                        </Image.RenderTransform>
                                    </Image>
                                </Grid>
                                <ContentPresenter x:Name="Part_Content" Grid.Row="0" Grid.Column="1" Margin="0,5,0,5"
                                                  HorizontalAlignment="Left" VerticalAlignment="Center"
                                                  Content="{TemplateBinding Content}"
                                                  TextElement.Foreground="{TemplateBinding Foreground}"
                                                  TextElement.FontWeight="{TemplateBinding FontWeight}"
                                                  TextElement.FontSize="{TemplateBinding FontSize}" />
                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="local:IconElement.ShowSelectedLine" Value="False">
                            <Setter TargetName="Indicator" Property="Visibility" Value="Collapsed" />
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
                            <Setter Property="Opacity" Value="0.8" />
                            <Setter TargetName="Indicator" Property="Fill" Value="{DynamicResource PrimaryBrush}" />
                        </Trigger>

                        <!-- 单文字，不显示图标 -->
                        <Trigger Property="local:IconElement.DisplayStyle" Value="Text">
                            <Setter TargetName="Grid_Icon" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Part_Content" Property="Visibility" Value="Visible" />
                            <Setter TargetName="Part_Content" Property="Margin" Value="{Binding Path=Padding,RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter Property="HorizontalContentAlignment" Value="Left" />
                        </Trigger>

                        <!-- 图标+文字，图标在文字前面 -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="local:IconElement.DisplayStyle" Value="ImageAndText" />
                                <Condition Property="local:IconElement.TextImageRelation" Value="ImageBeforeText" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Column0" Property="Width" Value="Auto" />
                            <Setter TargetName="Column1" Property="Width" Value="*" />
                            <Setter TargetName="Row0" Property="Height" Value="*" />
                            <Setter TargetName="Row1" Property="Height" Value="Auto" />
                            <Setter TargetName="Grid_Icon" Property="Grid.Column" Value="0" />
                            <Setter TargetName="Grid_Icon" Property="Grid.Row" Value="0" />
                            <Setter TargetName="Grid_Icon" Property="Margin" Value="5,0,0,0" />
                            <Setter TargetName="Part_Content" Property="Grid.Column" Value="1" />
                            <Setter TargetName="Part_Content" Property="Grid.Row" Value="0" />
                            <Setter TargetName="Part_Content" Property="Margin" Value="12,0,0,0" />
                            <Setter TargetName="Part_Content" Property="HorizontalAlignment" Value="Left" />
                            <Setter Property="HorizontalContentAlignment" Value="Left" />
                        </MultiTrigger>

                        <!-- 图标+文字，文字在图标前面 -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="local:IconElement.DisplayStyle" Value="ImageAndText" />
                                <Condition Property="local:IconElement.TextImageRelation" Value="TextBeforeImage" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Column0" Property="Width" Value="*" />
                            <Setter TargetName="Column1" Property="Width" Value="Auto" />
                            <Setter TargetName="Row0" Property="Height" Value="*" />
                            <Setter TargetName="Row1" Property="Height" Value="Auto" />
                            <Setter TargetName="Grid_Icon" Property="Grid.Column" Value="1" />
                            <Setter TargetName="Grid_Icon" Property="Grid.Row" Value="0" />
                            <Setter TargetName="Grid_Icon" Property="Margin" Value="12,0,0,0" />
                            <Setter TargetName="Part_Content" Property="Grid.Column" Value="0" />
                            <Setter TargetName="Part_Content" Property="Grid.Row" Value="0" />
                            <Setter TargetName="Part_Content" Property="Margin" Value="5,0,0,0" />
                            <Setter TargetName="Part_Content" Property="HorizontalAlignment" Value="Left" />
                            <Setter Property="HorizontalContentAlignment" Value="Left" />
                        </MultiTrigger>

                        <!-- 单图标，不显示文字 -->
                        <Trigger Property="local:IconElement.DisplayStyle" Value="Image">
                            <Setter TargetName="Grid_Icon" Property="Visibility" Value="Visible" />
                            <Setter TargetName="Part_Content" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Column0" Property="Width" Value="*" />
                            <Setter TargetName="Column1" Property="Width" Value="Auto" />
                            <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                        </Trigger>

                        <!-- 图标+文字，图标在文字上面 -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="local:IconElement.DisplayStyle" Value="ImageAndText" />
                                <Condition Property="local:IconElement.TextImageRelation" Value="ImageAboveText" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Column0" Property="Width" Value="*" />
                            <Setter TargetName="Column1" Property="Width" Value="Auto" />
                            <Setter TargetName="Row0" Property="Height" Value="*" />
                            <Setter TargetName="Row1" Property="Height" Value="Auto" />
                            <Setter TargetName="Grid_Icon" Property="Grid.Column" Value="0" />
                            <Setter TargetName="Grid_Icon" Property="Grid.Row" Value="0" />
                            <Setter TargetName="Grid_Icon" Property="Margin" Value="0,5,0,5" />
                            <Setter TargetName="Part_Content" Property="Grid.Column" Value="0" />
                            <Setter TargetName="Part_Content" Property="Grid.Row" Value="1" />
                            <Setter TargetName="Part_Content" Property="Margin" Value="0,5,0,0" />
                            <Setter TargetName="Part_Content" Property="HorizontalAlignment" Value="Center" />
                            <Setter Property="HorizontalContentAlignment" Value="Center" />
                        </MultiTrigger>

                        <!-- 图标+文字，文字在图标上 -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="local:IconElement.DisplayStyle" Value="ImageAndText" />
                                <Condition Property="local:IconElement.TextImageRelation" Value="TextAboveImage" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Column0" Property="Width" Value="*" />
                            <Setter TargetName="Column1" Property="Width" Value="Auto" />
                            <Setter TargetName="Row0" Property="Height" Value="Auto" />
                            <Setter TargetName="Row1" Property="Height" Value="*" />
                            <Setter TargetName="Grid_Icon" Property="Grid.Column" Value="0" />
                            <Setter TargetName="Grid_Icon" Property="Grid.Row" Value="1" />
                            <Setter TargetName="Grid_Icon" Property="Margin" Value="0,5,0,5" />
                            <Setter TargetName="Part_Content" Property="Grid.Column" Value="0" />
                            <Setter TargetName="Part_Content" Property="Grid.Row" Value="0" />
                            <Setter TargetName="Part_Content" Property="Margin" Value="0,5,0,0" />
                            <Setter TargetName="Part_Content" Property="HorizontalAlignment" Value="Center" />
                            <Setter Property="HorizontalContentAlignment" Value="Center" />
                        </MultiTrigger>

                        <!-- Button 文字+图片 水平方向 垂直方向-->
                        <!--<MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="local:IconElement.DisplayStyle" Value="ImageAndText" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Icon_Selected" Property="Visibility" Value="Visible" />
                        </MultiTrigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <!-- 仅显示文字 -->
            <Trigger Property="local:IconElement.DisplayStyle" Value="Text">
                <Setter Property="Height" Value="48" />
                <Setter Property="Width" Value="225" />
                <Setter Property="FontSize" Value="{DynamicResource SubHeadFontSize}" />
            </Trigger>
            <!-- 显示图片和文字，且图片在文字之之前 -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="local:IconElement.DisplayStyle" Value="ImageAndText" />
                    <Condition Property="local:IconElement.TextImageRelation" Value="ImageBeforeText" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Height" Value="48" />
                    <Setter Property="Width" Value="225" />
                    <Setter Property="local:IconElement.Width" Value="32" />
                    <Setter Property="local:IconElement.Height" Value="32" />
                    <Setter Property="FontSize" Value="{DynamicResource SubHeadFontSize}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
            <!-- 显示图片和文字，且图片在文字之后 -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="local:IconElement.DisplayStyle" Value="ImageAndText" />
                    <Condition Property="local:IconElement.TextImageRelation" Value="TextBeforeImage" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Height" Value="48" />
                    <Setter Property="Width" Value="225" />
                    <Setter Property="local:IconElement.Width" Value="32" />
                    <Setter Property="local:IconElement.Height" Value="32" />
                    <Setter Property="FontSize" Value="{DynamicResource SubHeadFontSize}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
            <!-- 仅显示图片 -->
            <Trigger Property="local:IconElement.DisplayStyle" Value="Image">
                <Setter Property="Height" Value="80" />
                <Setter Property="Width" Value="95" />
            </Trigger>
            <!-- 显示图片和文字，且图片在文字之上 -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="local:IconElement.DisplayStyle" Value="ImageAndText" />
                    <Condition Property="local:IconElement.TextImageRelation" Value="ImageAboveText" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Height" Value="80" />
                    <Setter Property="Width" Value="90" />
                    <Setter Property="local:IconElement.Width" Value="50" />
                    <Setter Property="FontSize" Value="{DynamicResource TextFontSize}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
            <!-- 显示图片和文字，且图片在文字之下 -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="local:IconElement.DisplayStyle" Value="ImageAndText" />
                    <Condition Property="local:IconElement.TextImageRelation" Value="TextAboveImage" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Height" Value="80" />
                    <Setter Property="Width" Value="90" />
                    <Setter Property="local:IconElement.Width" Value="50" />
                    <Setter Property="FontSize" Value="{DynamicResource TextFontSize}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Button.Custom" BasedOn="{StaticResource BaseStyle}" TargetType="Button">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="Chrome"
                            HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalAlignment}"
                            CornerRadius="{Binding Path=(local:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                            SnapsToDevicePixels="true"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}">
                        <ContentPresenter Margin="{TemplateBinding Padding}" 
                                          Content="{TemplateBinding Content}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <!--<Setter Property="Opacity" Value=".9" />-->
                            <Setter TargetName="Chrome" Property="Background" Value="{Binding Path=(local:BackgroundSwitchElement.MouseHoverBackground), RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <!--<Setter Property="Opacity" Value=".6" />-->
                            <Setter TargetName="Chrome" Property="Background" Value="{Binding Path=(local:BackgroundSwitchElement.MouseDownBackground), RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.4" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Button 图片按钮没有文本，只有图片和聚焦图片 -->
    <Style x:Key="Button.ImageOnly" TargetType="Button" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="local:IconElement.Image" Value="{x:Null}" />
        <Setter Property="local:IconElement.ImageSelected" Value="{x:Null}" />
        <Setter Property="local:IconElement.Stretch" Value="Uniform" />
        <Setter Property="local:IconElement.RotateAngle" Value="0" />
        <Setter Property="local:BorderElement.CornerRadius" Value="{DynamicResource DefaultCornerRadius}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Height" Value="48" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="RenderTransformOrigin" Value="0.5,0.5" />
        <Setter Property="RenderTransform">
            <Setter.Value>
                <ScaleTransform x:Name="ImageScale" ScaleX="1" ScaleY="1" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="menuButton" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
                            Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{Binding Path=(local:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <Image x:Name="Icon"
                                          Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                               VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                               Width="{Binding Path=(local:IconElement.Width), RelativeSource={RelativeSource TemplatedParent}}"
                               Height="{Binding Path=(local:IconElement.Height), RelativeSource={RelativeSource TemplatedParent}}"
                               Source="{Binding Path=(local:IconElement.Image), RelativeSource={RelativeSource TemplatedParent}}"
                               Stretch="{Binding Path=(local:IconElement.Stretch), RelativeSource={RelativeSource TemplatedParent}}"
                               RenderTransformOrigin="{Binding Path=(local:IconElement.RenderTransformOrigin), RelativeSource={RelativeSource TemplatedParent}}">
                                        <Image.RenderTransform>
                                <RotateTransform Angle="{Binding Path=(local:IconElement.RotateAngle), RelativeSource={RelativeSource TemplatedParent}}"                                                 
                                                 CenterX="{Binding Path=(local:IconElement.RotateCenterX), RelativeSource={RelativeSource TemplatedParent}}" 
                                                 CenterY="{Binding Path=(local:IconElement.RotateCenterY), RelativeSource={RelativeSource TemplatedParent}}"/>
                                        </Image.RenderTransform>
                                    </Image>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
                            <Setter Property="Opacity" Value="0.6" />
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
                            <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
                            <Setter TargetName="Icon" Property="Source" Value="{Binding Path=(local:IconElement.ImageSelected), RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
                            <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
                            <Setter TargetName="Icon" Property="Source" Value="{Binding Path=(local:IconElement.ImageSelected), RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True" />
                                <Condition Property="local:IconElement.ImageSelected" Value="{x:Null}" />
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
                            <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
                            <Setter TargetName="Icon" Property="Source" Value="{Binding Path=(local:IconElement.Image), RelativeSource={RelativeSource TemplatedParent}}" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="local:IconElement.ImageSelected" Value="{x:Null}" />
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
                            <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
                            <Setter TargetName="Icon" Property="Source" Value="{Binding Path=(local:IconElement.Image), RelativeSource={RelativeSource TemplatedParent}}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <EventTrigger RoutedEvent="RadioButton.PreviewMouseLeftButtonDown">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleX" To="0.9" Duration="0:0:0.3" AutoReverse="False"/>
                        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleY" To="0.9" Duration="0:0:0.3" AutoReverse="False"/>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="RadioButton.PreviewMouseLeftButtonUp">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleX" To="1" Duration="0:0:0.3" AutoReverse="False"/>
                        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleY" To="1" Duration="0:0:0.3" AutoReverse="False"/>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Button.ImageOnly.Circle" TargetType="Button" BasedOn="{StaticResource Button.ImageOnly}">
        <Setter Property="local:BorderElement.CornerRadius">
            <Setter.Value>
                <MultiBinding Converter="{StaticResource CornerRadiusConverter}"  ConverterParameter="Circle">
                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}"/>
                    <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}"/>
                </MultiBinding>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Button 图片按钮没有文本，只有图片和聚焦图片 -->
    <Style TargetType="Button" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource TextFontSize}" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Height" Value="40" />
        <Setter Property="Padding" Value="{DynamicResource DefaultControlPadding}" />
        <Setter Property="RenderTransformOrigin" Value="0.5,0.5" />
        <Setter Property="RenderTransform">
            <Setter.Value>
                <ScaleTransform x:Name="ImageScale" ScaleX="1" ScaleY="1" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <local:SimplePanel>
                        <Border Background="{TemplateBinding Background}" 
                                CornerRadius="{Binding Path=(local:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
                        <Border BorderThickness="{TemplateBinding BorderThickness}" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                CornerRadius="{Binding Path=(local:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                            <StackPanel Orientation="Horizontal" 
                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                        Margin="{TemplateBinding Padding}">
                                <Path Name="PathMain" 
                                      Width="{Binding Path=(local:IconElement.Width), RelativeSource={RelativeSource TemplatedParent}}" 
                                      Height="{Binding Path=(local:IconElement.Height), RelativeSource={RelativeSource TemplatedParent}}" 
                                      Fill="{DynamicResource GeometryBrush}" 
                                      SnapsToDevicePixels="True" Stretch="Uniform"
                                      Data="{Binding Path=(local:IconElement.Geometry), RelativeSource={RelativeSource TemplatedParent}}" />
                                <ContentPresenter Name="ContentPresenterMain" RecognizesAccessKey="True" 
                                                  ContentSource="Content"
                                                  VerticalAlignment="Center" 
                                                  Margin="6,0,0,0" 
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </StackPanel>
                        </Border>
                    </local:SimplePanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Content" Value="{x:Null}">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ContentPresenterMain" />
                        </Trigger>
                        <Trigger Property="local:IconElement.Geometry" Value="{x:Null}">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="PathMain" />
                            <Setter TargetName="ContentPresenterMain" Property="Margin" Value="0"  />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
                            <Setter Property="Opacity" Value="0.6" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}" />
                            <Setter TargetName="PathMain" Property="Fill" Value="{DynamicResource PrimaryBrush}" />
                            <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}" />
                            <Setter TargetName="PathMain" Property="Fill" Value="{DynamicResource PrimaryBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <EventTrigger RoutedEvent="RadioButton.PreviewMouseLeftButtonDown">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleX" To="0.9" Duration="0:0:0.3" AutoReverse="False"/>
                        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleY" To="0.9" Duration="0:0:0.3" AutoReverse="False"/>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="RadioButton.PreviewMouseLeftButtonUp">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleX" To="1" Duration="0:0:0.3" AutoReverse="False"/>
                        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleY" To="1" Duration="0:0:0.3" AutoReverse="False"/>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>