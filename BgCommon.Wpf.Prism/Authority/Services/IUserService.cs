using BgCommon.Wpf.Prism.Authority.Models;namespace BgCommon.Wpf.Prism.Authority.Services;/// <summary>///  用户服务接口./// </summary>public interface IUserService{    public const string LOGINWINDOWNAME = "BgCommon.Wpf.Prism.Authority";    public const string LOGINPARAM = nameof(LOGINPARAM);    public const string RESULT = nameof(RESULT);    /// <summary>    /// Gets or Sets 当前登陆用户.    /// </summary>    UserInfo? CurrentUser { get; set; }    /// <summary>    /// Gets a value indicating whether gets 是否已经登陆    /// </summary>    bool IsLogin { get; }    /// <summary>    /// 初始化化用户权限.    /// </summary>    /// <returns>Task</returns>    Task InitializeAsync();    /// <summary>    /// 显示登陆界面.    /// </summary>    /// <param name="isAllowAutoLoad">是否允许自动登陆.</param>    /// <returns>Task.</returns>    Task<LoginResult> ShowLoginViewAsync(bool isAllowAutoLoad = false);    /// <summary>    /// 切换用户.    /// </summary>    /// <returns>返回登陆结果.</returns>    Task<LoginResult> ShowSwitchUserViewAsync();    /// <summary>    /// 用户登陆授权.    /// </summary>    /// <param name="userName">用户名.</param>    /// <param name="password">用户密码.</param>    /// <returns>是否成功登陆</returns>    Task<LoginResult> LoginAsync(string userName, string password);    /// <summary>    /// 注销登陆    /// </summary>    /// <returns>是否成功注销登陆</returns>    Task<bool> LogoutAsync();    /// <summary>    /// 注册用户    /// </summary>    /// <param name="userName">用户名.</param>    /// <param name="password">用户密码.</param>    /// <param name="authority">用户权限.</param>    /// <returns>是否成功注册用户.</returns>    Task<bool> RegisterAsync(string userName, string password, UserAuthority authority);    /// <summary>    /// 更新用户信息.    /// </summary>    /// <param name="user">用户信息.</param>    /// <returns>是否成功更新用户信息.</returns>    Task<bool> UpdateUserInfoAsync(UserInfo user);    /// <summary>    /// 删除用户.    /// </summary>    /// <param name="userId">用户编码.</param>    /// <returns>是否成功删除用户.</returns>    Task<bool> DeleteUserAsync(string userId);    /// <summary>    /// 获取所有用户.    /// </summary>    /// <returns>返回用户列表.</returns>    Task<List<UserInfo>> GetAllUsersAsync();}